
testing_ver2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08005d48  08005d48  00015d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed8  08005ed8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee0  08005ee0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ee4  08005ee4  00015ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000074  08005f5c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08005f5c  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011014  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219e  00000000  00000000  000310b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00033258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  000341c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021744  00000000  00000000  00035050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ed0  00000000  00000000  00056794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cad0e  00000000  00000000  00067664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132372  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c34  00000000  00000000  001323c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00136ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0013701c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d30 	.word	0x08005d30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005d30 	.word	0x08005d30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__gedf2>:
 800083c:	f04f 3cff 	mov.w	ip, #4294967295
 8000840:	e006      	b.n	8000850 <__cmpdf2+0x4>
 8000842:	bf00      	nop

08000844 <__ledf2>:
 8000844:	f04f 0c01 	mov.w	ip, #1
 8000848:	e002      	b.n	8000850 <__cmpdf2+0x4>
 800084a:	bf00      	nop

0800084c <__cmpdf2>:
 800084c:	f04f 0c01 	mov.w	ip, #1
 8000850:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000854:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800085c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000866:	d01b      	beq.n	80008a0 <__cmpdf2+0x54>
 8000868:	b001      	add	sp, #4
 800086a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800086e:	bf0c      	ite	eq
 8000870:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000874:	ea91 0f03 	teqne	r1, r3
 8000878:	bf02      	ittt	eq
 800087a:	ea90 0f02 	teqeq	r0, r2
 800087e:	2000      	moveq	r0, #0
 8000880:	4770      	bxeq	lr
 8000882:	f110 0f00 	cmn.w	r0, #0
 8000886:	ea91 0f03 	teq	r1, r3
 800088a:	bf58      	it	pl
 800088c:	4299      	cmppl	r1, r3
 800088e:	bf08      	it	eq
 8000890:	4290      	cmpeq	r0, r2
 8000892:	bf2c      	ite	cs
 8000894:	17d8      	asrcs	r0, r3, #31
 8000896:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800089a:	f040 0001 	orr.w	r0, r0, #1
 800089e:	4770      	bx	lr
 80008a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a8:	d102      	bne.n	80008b0 <__cmpdf2+0x64>
 80008aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ae:	d107      	bne.n	80008c0 <__cmpdf2+0x74>
 80008b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d1d6      	bne.n	8000868 <__cmpdf2+0x1c>
 80008ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008be:	d0d3      	beq.n	8000868 <__cmpdf2+0x1c>
 80008c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <__aeabi_cdrcmple>:
 80008c8:	4684      	mov	ip, r0
 80008ca:	4610      	mov	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	468c      	mov	ip, r1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4663      	mov	r3, ip
 80008d4:	e000      	b.n	80008d8 <__aeabi_cdcmpeq>
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdcmpeq>:
 80008d8:	b501      	push	{r0, lr}
 80008da:	f7ff ffb7 	bl	800084c <__cmpdf2>
 80008de:	2800      	cmp	r0, #0
 80008e0:	bf48      	it	mi
 80008e2:	f110 0f00 	cmnmi.w	r0, #0
 80008e6:	bd01      	pop	{r0, pc}

080008e8 <__aeabi_dcmpeq>:
 80008e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ec:	f7ff fff4 	bl	80008d8 <__aeabi_cdcmpeq>
 80008f0:	bf0c      	ite	eq
 80008f2:	2001      	moveq	r0, #1
 80008f4:	2000      	movne	r0, #0
 80008f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008fa:	bf00      	nop

080008fc <__aeabi_dcmplt>:
 80008fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000900:	f7ff ffea 	bl	80008d8 <__aeabi_cdcmpeq>
 8000904:	bf34      	ite	cc
 8000906:	2001      	movcc	r0, #1
 8000908:	2000      	movcs	r0, #0
 800090a:	f85d fb08 	ldr.w	pc, [sp], #8
 800090e:	bf00      	nop

08000910 <__aeabi_dcmple>:
 8000910:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000914:	f7ff ffe0 	bl	80008d8 <__aeabi_cdcmpeq>
 8000918:	bf94      	ite	ls
 800091a:	2001      	movls	r0, #1
 800091c:	2000      	movhi	r0, #0
 800091e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000922:	bf00      	nop

08000924 <__aeabi_dcmpge>:
 8000924:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000928:	f7ff ffce 	bl	80008c8 <__aeabi_cdrcmple>
 800092c:	bf94      	ite	ls
 800092e:	2001      	movls	r0, #1
 8000930:	2000      	movhi	r0, #0
 8000932:	f85d fb08 	ldr.w	pc, [sp], #8
 8000936:	bf00      	nop

08000938 <__aeabi_dcmpgt>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff ffc4 	bl	80008c8 <__aeabi_cdrcmple>
 8000940:	bf34      	ite	cc
 8000942:	2001      	movcc	r0, #1
 8000944:	2000      	movcs	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_uldivmod>:
 800094c:	b953      	cbnz	r3, 8000964 <__aeabi_uldivmod+0x18>
 800094e:	b94a      	cbnz	r2, 8000964 <__aeabi_uldivmod+0x18>
 8000950:	2900      	cmp	r1, #0
 8000952:	bf08      	it	eq
 8000954:	2800      	cmpeq	r0, #0
 8000956:	bf1c      	itt	ne
 8000958:	f04f 31ff 	movne.w	r1, #4294967295
 800095c:	f04f 30ff 	movne.w	r0, #4294967295
 8000960:	f000 b974 	b.w	8000c4c <__aeabi_idiv0>
 8000964:	f1ad 0c08 	sub.w	ip, sp, #8
 8000968:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800096c:	f000 f806 	bl	800097c <__udivmoddi4>
 8000970:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000978:	b004      	add	sp, #16
 800097a:	4770      	bx	lr

0800097c <__udivmoddi4>:
 800097c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000980:	9d08      	ldr	r5, [sp, #32]
 8000982:	4604      	mov	r4, r0
 8000984:	468e      	mov	lr, r1
 8000986:	2b00      	cmp	r3, #0
 8000988:	d14d      	bne.n	8000a26 <__udivmoddi4+0xaa>
 800098a:	428a      	cmp	r2, r1
 800098c:	4694      	mov	ip, r2
 800098e:	d969      	bls.n	8000a64 <__udivmoddi4+0xe8>
 8000990:	fab2 f282 	clz	r2, r2
 8000994:	b152      	cbz	r2, 80009ac <__udivmoddi4+0x30>
 8000996:	fa01 f302 	lsl.w	r3, r1, r2
 800099a:	f1c2 0120 	rsb	r1, r2, #32
 800099e:	fa20 f101 	lsr.w	r1, r0, r1
 80009a2:	fa0c fc02 	lsl.w	ip, ip, r2
 80009a6:	ea41 0e03 	orr.w	lr, r1, r3
 80009aa:	4094      	lsls	r4, r2
 80009ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b0:	0c21      	lsrs	r1, r4, #16
 80009b2:	fbbe f6f8 	udiv	r6, lr, r8
 80009b6:	fa1f f78c 	uxth.w	r7, ip
 80009ba:	fb08 e316 	mls	r3, r8, r6, lr
 80009be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009c2:	fb06 f107 	mul.w	r1, r6, r7
 80009c6:	4299      	cmp	r1, r3
 80009c8:	d90a      	bls.n	80009e0 <__udivmoddi4+0x64>
 80009ca:	eb1c 0303 	adds.w	r3, ip, r3
 80009ce:	f106 30ff 	add.w	r0, r6, #4294967295
 80009d2:	f080 811f 	bcs.w	8000c14 <__udivmoddi4+0x298>
 80009d6:	4299      	cmp	r1, r3
 80009d8:	f240 811c 	bls.w	8000c14 <__udivmoddi4+0x298>
 80009dc:	3e02      	subs	r6, #2
 80009de:	4463      	add	r3, ip
 80009e0:	1a5b      	subs	r3, r3, r1
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009e8:	fb08 3310 	mls	r3, r8, r0, r3
 80009ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009f0:	fb00 f707 	mul.w	r7, r0, r7
 80009f4:	42a7      	cmp	r7, r4
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x92>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a00:	f080 810a 	bcs.w	8000c18 <__udivmoddi4+0x29c>
 8000a04:	42a7      	cmp	r7, r4
 8000a06:	f240 8107 	bls.w	8000c18 <__udivmoddi4+0x29c>
 8000a0a:	4464      	add	r4, ip
 8000a0c:	3802      	subs	r0, #2
 8000a0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a12:	1be4      	subs	r4, r4, r7
 8000a14:	2600      	movs	r6, #0
 8000a16:	b11d      	cbz	r5, 8000a20 <__udivmoddi4+0xa4>
 8000a18:	40d4      	lsrs	r4, r2
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000a20:	4631      	mov	r1, r6
 8000a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d909      	bls.n	8000a3e <__udivmoddi4+0xc2>
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	f000 80ef 	beq.w	8000c0e <__udivmoddi4+0x292>
 8000a30:	2600      	movs	r6, #0
 8000a32:	e9c5 0100 	strd	r0, r1, [r5]
 8000a36:	4630      	mov	r0, r6
 8000a38:	4631      	mov	r1, r6
 8000a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3e:	fab3 f683 	clz	r6, r3
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d14a      	bne.n	8000adc <__udivmoddi4+0x160>
 8000a46:	428b      	cmp	r3, r1
 8000a48:	d302      	bcc.n	8000a50 <__udivmoddi4+0xd4>
 8000a4a:	4282      	cmp	r2, r0
 8000a4c:	f200 80f9 	bhi.w	8000c42 <__udivmoddi4+0x2c6>
 8000a50:	1a84      	subs	r4, r0, r2
 8000a52:	eb61 0303 	sbc.w	r3, r1, r3
 8000a56:	2001      	movs	r0, #1
 8000a58:	469e      	mov	lr, r3
 8000a5a:	2d00      	cmp	r5, #0
 8000a5c:	d0e0      	beq.n	8000a20 <__udivmoddi4+0xa4>
 8000a5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a62:	e7dd      	b.n	8000a20 <__udivmoddi4+0xa4>
 8000a64:	b902      	cbnz	r2, 8000a68 <__udivmoddi4+0xec>
 8000a66:	deff      	udf	#255	; 0xff
 8000a68:	fab2 f282 	clz	r2, r2
 8000a6c:	2a00      	cmp	r2, #0
 8000a6e:	f040 8092 	bne.w	8000b96 <__udivmoddi4+0x21a>
 8000a72:	eba1 010c 	sub.w	r1, r1, ip
 8000a76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a7a:	fa1f fe8c 	uxth.w	lr, ip
 8000a7e:	2601      	movs	r6, #1
 8000a80:	0c20      	lsrs	r0, r4, #16
 8000a82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a86:	fb07 1113 	mls	r1, r7, r3, r1
 8000a8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a8e:	fb0e f003 	mul.w	r0, lr, r3
 8000a92:	4288      	cmp	r0, r1
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0x12c>
 8000a96:	eb1c 0101 	adds.w	r1, ip, r1
 8000a9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a9e:	d202      	bcs.n	8000aa6 <__udivmoddi4+0x12a>
 8000aa0:	4288      	cmp	r0, r1
 8000aa2:	f200 80cb 	bhi.w	8000c3c <__udivmoddi4+0x2c0>
 8000aa6:	4643      	mov	r3, r8
 8000aa8:	1a09      	subs	r1, r1, r0
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ab4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ab8:	fb0e fe00 	mul.w	lr, lr, r0
 8000abc:	45a6      	cmp	lr, r4
 8000abe:	d908      	bls.n	8000ad2 <__udivmoddi4+0x156>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac8:	d202      	bcs.n	8000ad0 <__udivmoddi4+0x154>
 8000aca:	45a6      	cmp	lr, r4
 8000acc:	f200 80bb 	bhi.w	8000c46 <__udivmoddi4+0x2ca>
 8000ad0:	4608      	mov	r0, r1
 8000ad2:	eba4 040e 	sub.w	r4, r4, lr
 8000ad6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ada:	e79c      	b.n	8000a16 <__udivmoddi4+0x9a>
 8000adc:	f1c6 0720 	rsb	r7, r6, #32
 8000ae0:	40b3      	lsls	r3, r6
 8000ae2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ae6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aea:	fa20 f407 	lsr.w	r4, r0, r7
 8000aee:	fa01 f306 	lsl.w	r3, r1, r6
 8000af2:	431c      	orrs	r4, r3
 8000af4:	40f9      	lsrs	r1, r7
 8000af6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000afa:	fa00 f306 	lsl.w	r3, r0, r6
 8000afe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b02:	0c20      	lsrs	r0, r4, #16
 8000b04:	fa1f fe8c 	uxth.w	lr, ip
 8000b08:	fb09 1118 	mls	r1, r9, r8, r1
 8000b0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b10:	fb08 f00e 	mul.w	r0, r8, lr
 8000b14:	4288      	cmp	r0, r1
 8000b16:	fa02 f206 	lsl.w	r2, r2, r6
 8000b1a:	d90b      	bls.n	8000b34 <__udivmoddi4+0x1b8>
 8000b1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b24:	f080 8088 	bcs.w	8000c38 <__udivmoddi4+0x2bc>
 8000b28:	4288      	cmp	r0, r1
 8000b2a:	f240 8085 	bls.w	8000c38 <__udivmoddi4+0x2bc>
 8000b2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b32:	4461      	add	r1, ip
 8000b34:	1a09      	subs	r1, r1, r0
 8000b36:	b2a4      	uxth	r4, r4
 8000b38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b48:	458e      	cmp	lr, r1
 8000b4a:	d908      	bls.n	8000b5e <__udivmoddi4+0x1e2>
 8000b4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b54:	d26c      	bcs.n	8000c30 <__udivmoddi4+0x2b4>
 8000b56:	458e      	cmp	lr, r1
 8000b58:	d96a      	bls.n	8000c30 <__udivmoddi4+0x2b4>
 8000b5a:	3802      	subs	r0, #2
 8000b5c:	4461      	add	r1, ip
 8000b5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b62:	fba0 9402 	umull	r9, r4, r0, r2
 8000b66:	eba1 010e 	sub.w	r1, r1, lr
 8000b6a:	42a1      	cmp	r1, r4
 8000b6c:	46c8      	mov	r8, r9
 8000b6e:	46a6      	mov	lr, r4
 8000b70:	d356      	bcc.n	8000c20 <__udivmoddi4+0x2a4>
 8000b72:	d053      	beq.n	8000c1c <__udivmoddi4+0x2a0>
 8000b74:	b15d      	cbz	r5, 8000b8e <__udivmoddi4+0x212>
 8000b76:	ebb3 0208 	subs.w	r2, r3, r8
 8000b7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b82:	fa22 f306 	lsr.w	r3, r2, r6
 8000b86:	40f1      	lsrs	r1, r6
 8000b88:	431f      	orrs	r7, r3
 8000b8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b8e:	2600      	movs	r6, #0
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	f1c2 0320 	rsb	r3, r2, #32
 8000b9a:	40d8      	lsrs	r0, r3
 8000b9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ba4:	4091      	lsls	r1, r2
 8000ba6:	4301      	orrs	r1, r0
 8000ba8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bac:	fa1f fe8c 	uxth.w	lr, ip
 8000bb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000bb8:	0c0b      	lsrs	r3, r1, #16
 8000bba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000bc2:	429e      	cmp	r6, r3
 8000bc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000bc8:	d908      	bls.n	8000bdc <__udivmoddi4+0x260>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bd2:	d22f      	bcs.n	8000c34 <__udivmoddi4+0x2b8>
 8000bd4:	429e      	cmp	r6, r3
 8000bd6:	d92d      	bls.n	8000c34 <__udivmoddi4+0x2b8>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	4463      	add	r3, ip
 8000bdc:	1b9b      	subs	r3, r3, r6
 8000bde:	b289      	uxth	r1, r1
 8000be0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000be4:	fb07 3316 	mls	r3, r7, r6, r3
 8000be8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bec:	fb06 f30e 	mul.w	r3, r6, lr
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d908      	bls.n	8000c06 <__udivmoddi4+0x28a>
 8000bf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bfc:	d216      	bcs.n	8000c2c <__udivmoddi4+0x2b0>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d914      	bls.n	8000c2c <__udivmoddi4+0x2b0>
 8000c02:	3e02      	subs	r6, #2
 8000c04:	4461      	add	r1, ip
 8000c06:	1ac9      	subs	r1, r1, r3
 8000c08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c0c:	e738      	b.n	8000a80 <__udivmoddi4+0x104>
 8000c0e:	462e      	mov	r6, r5
 8000c10:	4628      	mov	r0, r5
 8000c12:	e705      	b.n	8000a20 <__udivmoddi4+0xa4>
 8000c14:	4606      	mov	r6, r0
 8000c16:	e6e3      	b.n	80009e0 <__udivmoddi4+0x64>
 8000c18:	4618      	mov	r0, r3
 8000c1a:	e6f8      	b.n	8000a0e <__udivmoddi4+0x92>
 8000c1c:	454b      	cmp	r3, r9
 8000c1e:	d2a9      	bcs.n	8000b74 <__udivmoddi4+0x1f8>
 8000c20:	ebb9 0802 	subs.w	r8, r9, r2
 8000c24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c28:	3801      	subs	r0, #1
 8000c2a:	e7a3      	b.n	8000b74 <__udivmoddi4+0x1f8>
 8000c2c:	4646      	mov	r6, r8
 8000c2e:	e7ea      	b.n	8000c06 <__udivmoddi4+0x28a>
 8000c30:	4620      	mov	r0, r4
 8000c32:	e794      	b.n	8000b5e <__udivmoddi4+0x1e2>
 8000c34:	4640      	mov	r0, r8
 8000c36:	e7d1      	b.n	8000bdc <__udivmoddi4+0x260>
 8000c38:	46d0      	mov	r8, sl
 8000c3a:	e77b      	b.n	8000b34 <__udivmoddi4+0x1b8>
 8000c3c:	3b02      	subs	r3, #2
 8000c3e:	4461      	add	r1, ip
 8000c40:	e732      	b.n	8000aa8 <__udivmoddi4+0x12c>
 8000c42:	4630      	mov	r0, r6
 8000c44:	e709      	b.n	8000a5a <__udivmoddi4+0xde>
 8000c46:	4464      	add	r4, ip
 8000c48:	3802      	subs	r0, #2
 8000c4a:	e742      	b.n	8000ad2 <__udivmoddi4+0x156>

08000c4c <__aeabi_idiv0>:
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	srand(time(NULL));
 8000c56:	2000      	movs	r0, #0
 8000c58:	f004 f83c 	bl	8004cd4 <time>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4613      	mov	r3, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f003 ffca 	bl	8004bfc <srand>
	int T1 = (rand() % 17)*1000;
 8000c68:	f003 fff6 	bl	8004c58 <rand>
 8000c6c:	4601      	mov	r1, r0
 8000c6e:	4ba6      	ldr	r3, [pc, #664]	; (8000f08 <main+0x2b8>)
 8000c70:	fb83 2301 	smull	r2, r3, r3, r1
 8000c74:	10da      	asrs	r2, r3, #3
 8000c76:	17cb      	asrs	r3, r1, #31
 8000c78:	1ad2      	subs	r2, r2, r3
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	011b      	lsls	r3, r3, #4
 8000c7e:	4413      	add	r3, r2
 8000c80:	1aca      	subs	r2, r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fb02 f303 	mul.w	r3, r2, r3
 8000c8a:	61fb      	str	r3, [r7, #28]
	int T2 = (rand() % 5)*1000;
 8000c8c:	f003 ffe4 	bl	8004c58 <rand>
 8000c90:	4601      	mov	r1, r0
 8000c92:	4b9e      	ldr	r3, [pc, #632]	; (8000f0c <main+0x2bc>)
 8000c94:	fb83 2301 	smull	r2, r3, r3, r1
 8000c98:	105a      	asrs	r2, r3, #1
 8000c9a:	17cb      	asrs	r3, r1, #31
 8000c9c:	1ad2      	subs	r2, r2, r3
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	1aca      	subs	r2, r1, r3
 8000ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000caa:	fb02 f303 	mul.w	r3, r2, r3
 8000cae:	61bb      	str	r3, [r7, #24]
	int T3 = 16000;
 8000cb0:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000cb4:	617b      	str	r3, [r7, #20]
	int gameModeStart = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cba:	f000 fd3c 	bl	8001736 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbe:	f000 f931 	bl	8000f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc2:	f000 fa37 	bl	8001134 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cc6:	f000 fa05 	bl	80010d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cca:	f000 f98d 	bl	8000fe8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000cce:	210c      	movs	r1, #12
 8000cd0:	488f      	ldr	r0, [pc, #572]	; (8000f10 <main+0x2c0>)
 8000cd2:	f002 fb03 	bl	80032dc <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET && gameModeStart == 0) {
 8000cd6:	2140      	movs	r1, #64	; 0x40
 8000cd8:	488e      	ldr	r0, [pc, #568]	; (8000f14 <main+0x2c4>)
 8000cda:	f001 f841 	bl	8001d60 <HAL_GPIO_ReadPin>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	f040 8100 	bne.w	8000ee6 <main+0x296>
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f040 80fc 	bne.w	8000ee6 <main+0x296>
		  gameModeStart = 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	603b      	str	r3, [r7, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // turn red led on
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	4887      	ldr	r0, [pc, #540]	; (8000f14 <main+0x2c4>)
 8000cf8:	f001 f84a 	bl	8001d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // turn blue led on
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d06:	f001 f843 	bl	8001d90 <HAL_GPIO_WritePin>
		  HAL_Delay(T1);
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fd87 	bl	8001820 <HAL_Delay>
		  uint32_t start = HAL_GetTick(); // get the milliseconds right before the leds turn off - 32 bits so overflow will take a long time
 8000d12:	f000 fd79 	bl	8001808 <HAL_GetTick>
 8000d16:	6138      	str	r0, [r7, #16]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	487d      	ldr	r0, [pc, #500]	; (8000f14 <main+0x2c4>)
 8000d1e:	f001 f837 	bl	8001d90 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); // turn the leds off
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2c:	f001 f830 	bl	8001d90 <HAL_GPIO_WritePin>

		  while (HAL_GetTick() - start < T2 && attemptNumber == 1) { // starts the clock, while loop only runs for T2 milliseconds
 8000d30:	e006      	b.n	8000d40 <main+0xf0>
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000d32:	2120      	movs	r1, #32
 8000d34:	4877      	ldr	r0, [pc, #476]	; (8000f14 <main+0x2c4>)
 8000d36:	f001 f843 	bl	8001dc0 <HAL_GPIO_TogglePin>
			  HAL_Delay(100);
 8000d3a:	2064      	movs	r0, #100	; 0x64
 8000d3c:	f000 fd70 	bl	8001820 <HAL_Delay>
		  while (HAL_GetTick() - start < T2 && attemptNumber == 1) { // starts the clock, while loop only runs for T2 milliseconds
 8000d40:	f000 fd62 	bl	8001808 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	1ad2      	subs	r2, r2, r3
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d203      	bcs.n	8000d58 <main+0x108>
 8000d50:	4b71      	ldr	r3, [pc, #452]	; (8000f18 <main+0x2c8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d0ec      	beq.n	8000d32 <main+0xe2>
		  }
		  if (attemptNumber == 2) {
 8000d58:	4b6f      	ldr	r3, [pc, #444]	; (8000f18 <main+0x2c8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d111      	bne.n	8000d84 <main+0x134>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2120      	movs	r1, #32
 8000d64:	486b      	ldr	r0, [pc, #428]	; (8000f14 <main+0x2c4>)
 8000d66:	f001 f813 	bl	8001d90 <HAL_GPIO_WritePin>
			  htim2.Instance->CCR4 = 750;
 8000d6a:	4b69      	ldr	r3, [pc, #420]	; (8000f10 <main+0x2c0>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000d72:	641a      	str	r2, [r3, #64]	; 0x40
			  HAL_Delay(T3);
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fd52 	bl	8001820 <HAL_Delay>
			  htim2.Instance->CCR4 = 250;
 8000d7c:	4b64      	ldr	r3, [pc, #400]	; (8000f10 <main+0x2c0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	22fa      	movs	r2, #250	; 0xfa
 8000d82:	641a      	str	r2, [r3, #64]	; 0x40
		  }
		  uint32_t time_break = HAL_GetTick(); // gets the time right before the next while loop
 8000d84:	f000 fd40 	bl	8001808 <HAL_GetTick>
 8000d88:	60f8      	str	r0, [r7, #12]
          while (HAL_GetTick() - time_break < 0.75*T2 && attemptNumber == 2) { // start another clock, this time for only 6 seconds
 8000d8a:	e006      	b.n	8000d9a <main+0x14a>
              HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	4861      	ldr	r0, [pc, #388]	; (8000f14 <main+0x2c4>)
 8000d90:	f001 f816 	bl	8001dc0 <HAL_GPIO_TogglePin>
              HAL_Delay(100);
 8000d94:	2064      	movs	r0, #100	; 0x64
 8000d96:	f000 fd43 	bl	8001820 <HAL_Delay>
          while (HAL_GetTick() - time_break < 0.75*T2 && attemptNumber == 2) { // start another clock, this time for only 6 seconds
 8000d9a:	f000 fd35 	bl	8001808 <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fccf 	bl	8000748 <__aeabi_ui2d>
 8000daa:	4604      	mov	r4, r0
 8000dac:	460d      	mov	r5, r1
 8000dae:	69b8      	ldr	r0, [r7, #24]
 8000db0:	f7ff fcda 	bl	8000768 <__aeabi_i2d>
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	4b58      	ldr	r3, [pc, #352]	; (8000f1c <main+0x2cc>)
 8000dba:	f7ff fa59 	bl	8000270 <__aeabi_dmul>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	4629      	mov	r1, r5
 8000dc6:	f7ff fd99 	bl	80008fc <__aeabi_dcmplt>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <main+0x188>
 8000dd0:	4b51      	ldr	r3, [pc, #324]	; (8000f18 <main+0x2c8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d0d9      	beq.n	8000d8c <main+0x13c>
          }
		  if (attemptNumber == 3) {
 8000dd8:	4b4f      	ldr	r3, [pc, #316]	; (8000f18 <main+0x2c8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d111      	bne.n	8000e04 <main+0x1b4>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2120      	movs	r1, #32
 8000de4:	484b      	ldr	r0, [pc, #300]	; (8000f14 <main+0x2c4>)
 8000de6:	f000 ffd3 	bl	8001d90 <HAL_GPIO_WritePin>
			  htim2.Instance->CCR4 = 750;
 8000dea:	4b49      	ldr	r3, [pc, #292]	; (8000f10 <main+0x2c0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000df2:	641a      	str	r2, [r3, #64]	; 0x40
			  HAL_Delay(T3);
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fd12 	bl	8001820 <HAL_Delay>
			  htim2.Instance->CCR4 = 250;
 8000dfc:	4b44      	ldr	r3, [pc, #272]	; (8000f10 <main+0x2c0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	22fa      	movs	r2, #250	; 0xfa
 8000e02:	641a      	str	r2, [r3, #64]	; 0x40
		  }
          uint32_t time_break_2 = HAL_GetTick();
 8000e04:	f000 fd00 	bl	8001808 <HAL_GetTick>
 8000e08:	60b8      	str	r0, [r7, #8]
          while (HAL_GetTick() - time_break_2 < 0.5*T2 && attemptNumber == 3) {
 8000e0a:	e006      	b.n	8000e1a <main+0x1ca>
              HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000e0c:	2120      	movs	r1, #32
 8000e0e:	4841      	ldr	r0, [pc, #260]	; (8000f14 <main+0x2c4>)
 8000e10:	f000 ffd6 	bl	8001dc0 <HAL_GPIO_TogglePin>
              HAL_Delay(100);
 8000e14:	2064      	movs	r0, #100	; 0x64
 8000e16:	f000 fd03 	bl	8001820 <HAL_Delay>
          while (HAL_GetTick() - time_break_2 < 0.5*T2 && attemptNumber == 3) {
 8000e1a:	f000 fcf5 	bl	8001808 <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fc8f 	bl	8000748 <__aeabi_ui2d>
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	460d      	mov	r5, r1
 8000e2e:	69b8      	ldr	r0, [r7, #24]
 8000e30:	f7ff fc9a 	bl	8000768 <__aeabi_i2d>
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	4b39      	ldr	r3, [pc, #228]	; (8000f20 <main+0x2d0>)
 8000e3a:	f7ff fa19 	bl	8000270 <__aeabi_dmul>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4620      	mov	r0, r4
 8000e44:	4629      	mov	r1, r5
 8000e46:	f7ff fd59 	bl	80008fc <__aeabi_dcmplt>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <main+0x208>
 8000e50:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <main+0x2c8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d0d9      	beq.n	8000e0c <main+0x1bc>
          }
		  if (attemptNumber == 4) {
 8000e58:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <main+0x2c8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d111      	bne.n	8000e84 <main+0x234>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2120      	movs	r1, #32
 8000e64:	482b      	ldr	r0, [pc, #172]	; (8000f14 <main+0x2c4>)
 8000e66:	f000 ff93 	bl	8001d90 <HAL_GPIO_WritePin>
			  htim2.Instance->CCR4 = 750;
 8000e6a:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <main+0x2c0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000e72:	641a      	str	r2, [r3, #64]	; 0x40
			  HAL_Delay(T3);
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 fcd2 	bl	8001820 <HAL_Delay>
			  htim2.Instance->CCR4 = 250;
 8000e7c:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <main+0x2c0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	22fa      	movs	r2, #250	; 0xfa
 8000e82:	641a      	str	r2, [r3, #64]	; 0x40
		  }
          uint32_t time_break_3 = HAL_GetTick();
 8000e84:	f000 fcc0 	bl	8001808 <HAL_GetTick>
 8000e88:	6078      	str	r0, [r7, #4]
          while (HAL_GetTick() - time_break_3 < 3000 && attemptNumber == 4) {
 8000e8a:	e016      	b.n	8000eba <main+0x26a>
        	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	4821      	ldr	r0, [pc, #132]	; (8000f14 <main+0x2c4>)
 8000e90:	f000 ff96 	bl	8001dc0 <HAL_GPIO_TogglePin>
        	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000e94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9c:	f000 ff90 	bl	8001dc0 <HAL_GPIO_TogglePin>
        	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000ea0:	2120      	movs	r1, #32
 8000ea2:	481c      	ldr	r0, [pc, #112]	; (8000f14 <main+0x2c4>)
 8000ea4:	f000 ff8c 	bl	8001dc0 <HAL_GPIO_TogglePin>
        	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_11);
 8000ea8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f000 ff86 	bl	8001dc0 <HAL_GPIO_TogglePin>
        	  HAL_Delay(250);
 8000eb4:	20fa      	movs	r0, #250	; 0xfa
 8000eb6:	f000 fcb3 	bl	8001820 <HAL_Delay>
          while (HAL_GetTick() - time_break_3 < 3000 && attemptNumber == 4) {
 8000eba:	f000 fca5 	bl	8001808 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d803      	bhi.n	8000ed4 <main+0x284>
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <main+0x2c8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d0db      	beq.n	8000e8c <main+0x23c>
          }
          if (attemptNumber == 4) {
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <main+0x2c8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d104      	bne.n	8000ee6 <main+0x296>
        	  reset(&gameModeStart, &attemptNumber);
 8000edc:	463b      	mov	r3, r7
 8000ede:	490e      	ldr	r1, [pc, #56]	; (8000f18 <main+0x2c8>)
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f9d5 	bl	8001290 <reset>
          }
	  }

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) { // reset button
 8000ee6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f000 ff37 	bl	8001d60 <HAL_GPIO_ReadPin>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	f47f aeee 	bne.w	8000cd6 <main+0x86>
		  reset(&gameModeStart, &attemptNumber);
 8000efa:	463b      	mov	r3, r7
 8000efc:	4906      	ldr	r1, [pc, #24]	; (8000f18 <main+0x2c8>)
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f9c6 	bl	8001290 <reset>
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET && gameModeStart == 0) {
 8000f04:	e6e7      	b.n	8000cd6 <main+0x86>
 8000f06:	bf00      	nop
 8000f08:	78787879 	.word	0x78787879
 8000f0c:	66666667 	.word	0x66666667
 8000f10:	20000090 	.word	0x20000090
 8000f14:	48000400 	.word	0x48000400
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	3fe80000 	.word	0x3fe80000
 8000f20:	3fe00000 	.word	0x3fe00000

08000f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b096      	sub	sp, #88	; 0x58
 8000f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	2244      	movs	r2, #68	; 0x44
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 fe5a 	bl	8004bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f38:	463b      	mov	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f46:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f4a:	f000 ff89 	bl	8001e60 <HAL_PWREx_ControlVoltageScaling>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f54:	f000 f9c6 	bl	80012e4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f58:	f000 ff64 	bl	8001e24 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f5c:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <SystemClock_Config+0xc0>)
 8000f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f62:	4a20      	ldr	r2, [pc, #128]	; (8000fe4 <SystemClock_Config+0xc0>)
 8000f64:	f023 0318 	bic.w	r3, r3, #24
 8000f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f6c:	2314      	movs	r3, #20
 8000f6e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f70:	2301      	movs	r3, #1
 8000f72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f74:	2301      	movs	r3, #1
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f7c:	2360      	movs	r3, #96	; 0x60
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f80:	2302      	movs	r3, #2
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f84:	2301      	movs	r3, #1
 8000f86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f90:	2307      	movs	r3, #7
 8000f92:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 ffb3 	bl	8001f0c <HAL_RCC_OscConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000fac:	f000 f99a 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 fbb3 	bl	8002734 <HAL_RCC_ClockConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000fd4:	f000 f986 	bl	80012e4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000fd8:	f001 ffc6 	bl	8002f68 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000fdc:	bf00      	nop
 8000fde:	3758      	adds	r7, #88	; 0x58
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08e      	sub	sp, #56	; 0x38
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001008:	463b      	mov	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800101a:	4b2d      	ldr	r3, [pc, #180]	; (80010d0 <MX_TIM2_Init+0xe8>)
 800101c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001020:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001022:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <MX_TIM2_Init+0xe8>)
 8001024:	223f      	movs	r2, #63	; 0x3f
 8001026:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <MX_TIM2_Init+0xe8>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800102e:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <MX_TIM2_Init+0xe8>)
 8001030:	f242 720f 	movw	r2, #9999	; 0x270f
 8001034:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <MX_TIM2_Init+0xe8>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <MX_TIM2_Init+0xe8>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001042:	4823      	ldr	r0, [pc, #140]	; (80010d0 <MX_TIM2_Init+0xe8>)
 8001044:	f002 f892 	bl	800316c <HAL_TIM_Base_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800104e:	f000 f949 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001058:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800105c:	4619      	mov	r1, r3
 800105e:	481c      	ldr	r0, [pc, #112]	; (80010d0 <MX_TIM2_Init+0xe8>)
 8001060:	f002 fc4e 	bl	8003900 <HAL_TIM_ConfigClockSource>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800106a:	f000 f93b 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800106e:	4818      	ldr	r0, [pc, #96]	; (80010d0 <MX_TIM2_Init+0xe8>)
 8001070:	f002 f8d3 	bl	800321a <HAL_TIM_PWM_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800107a:	f000 f933 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	4810      	ldr	r0, [pc, #64]	; (80010d0 <MX_TIM2_Init+0xe8>)
 800108e:	f003 f8d5 	bl	800423c <HAL_TIMEx_MasterConfigSynchronization>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001098:	f000 f924 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800109c:	2360      	movs	r3, #96	; 0x60
 800109e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	220c      	movs	r2, #12
 80010b0:	4619      	mov	r1, r3
 80010b2:	4807      	ldr	r0, [pc, #28]	; (80010d0 <MX_TIM2_Init+0xe8>)
 80010b4:	f002 fb10 	bl	80036d8 <HAL_TIM_PWM_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80010be:	f000 f911 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <MX_TIM2_Init+0xe8>)
 80010c4:	f000 f95c 	bl	8001380 <HAL_TIM_MspPostInit>

}
 80010c8:	bf00      	nop
 80010ca:	3738      	adds	r7, #56	; 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000090 	.word	0x20000090

080010d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_USART2_UART_Init+0x58>)
 80010da:	4a15      	ldr	r2, [pc, #84]	; (8001130 <MX_USART2_UART_Init+0x5c>)
 80010dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <MX_USART2_UART_Init+0x58>)
 80010e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_USART2_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_USART2_UART_Init+0x58>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_USART2_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_USART2_UART_Init+0x58>)
 80010fa:	220c      	movs	r2, #12
 80010fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_USART2_UART_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_USART2_UART_Init+0x58>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <MX_USART2_UART_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_USART2_UART_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_USART2_UART_Init+0x58>)
 8001118:	f003 f914 	bl	8004344 <HAL_UART_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001122:	f000 f8df 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200000dc 	.word	0x200000dc
 8001130:	40004400 	.word	0x40004400

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b41      	ldr	r3, [pc, #260]	; (8001250 <MX_GPIO_Init+0x11c>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	4a40      	ldr	r2, [pc, #256]	; (8001250 <MX_GPIO_Init+0x11c>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001156:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <MX_GPIO_Init+0x11c>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <MX_GPIO_Init+0x11c>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a3a      	ldr	r2, [pc, #232]	; (8001250 <MX_GPIO_Init+0x11c>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b38      	ldr	r3, [pc, #224]	; (8001250 <MX_GPIO_Init+0x11c>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b35      	ldr	r3, [pc, #212]	; (8001250 <MX_GPIO_Init+0x11c>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a34      	ldr	r2, [pc, #208]	; (8001250 <MX_GPIO_Init+0x11c>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b32      	ldr	r3, [pc, #200]	; (8001250 <MX_GPIO_Init+0x11c>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|LD3_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	212a      	movs	r1, #42	; 0x2a
 8001196:	482f      	ldr	r0, [pc, #188]	; (8001254 <MX_GPIO_Init+0x120>)
 8001198:	f000 fdfa 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a6:	f000 fdf3 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011aa:	2320      	movs	r3, #32
 80011ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	4619      	mov	r1, r3
 80011be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c2:	f000 fc63 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 LD3_Pin PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD3_Pin|GPIO_PIN_5;
 80011c6:	232a      	movs	r3, #42	; 0x2a
 80011c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	4619      	mov	r1, r3
 80011dc:	481d      	ldr	r0, [pc, #116]	; (8001254 <MX_GPIO_Init+0x120>)
 80011de:	f000 fc55 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80011e2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80011e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	4619      	mov	r1, r3
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fe:	f000 fc45 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001202:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	4619      	mov	r1, r3
 8001216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121a:	f000 fc37 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800121e:	2340      	movs	r3, #64	; 0x40
 8001220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	4619      	mov	r1, r3
 8001230:	4808      	ldr	r0, [pc, #32]	; (8001254 <MX_GPIO_Init+0x120>)
 8001232:	f000 fc2b 	bl	8001a8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2017      	movs	r0, #23
 800123c:	f000 fbef 	bl	8001a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001240:	2017      	movs	r0, #23
 8001242:	f000 fc08 	bl	8001a56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001246:	bf00      	nop
 8001248:	3720      	adds	r7, #32
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000
 8001254:	48000400 	.word	0x48000400

08001258 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { // interrupt for orange button
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_5 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET) { // orange button pressed and yellow led on
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	2b20      	cmp	r3, #32
 8001266:	d10b      	bne.n	8001280 <HAL_GPIO_EXTI_Callback+0x28>
 8001268:	2120      	movs	r1, #32
 800126a:	4807      	ldr	r0, [pc, #28]	; (8001288 <HAL_GPIO_EXTI_Callback+0x30>)
 800126c:	f000 fd78 	bl	8001d60 <HAL_GPIO_ReadPin>
 8001270:	4603      	mov	r3, r0
 8001272:	2b01      	cmp	r3, #1
 8001274:	d104      	bne.n	8001280 <HAL_GPIO_EXTI_Callback+0x28>
		++attemptNumber;
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_GPIO_EXTI_Callback+0x34>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	4a03      	ldr	r2, [pc, #12]	; (800128c <HAL_GPIO_EXTI_Callback+0x34>)
 800127e:	6013      	str	r3, [r2, #0]
	}
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	48000400 	.word	0x48000400
 800128c:	20000000 	.word	0x20000000

08001290 <reset>:

void reset(int *gameMode, int *attempt) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
	*gameMode = 0;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
	*attempt = 1;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2102      	movs	r1, #2
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <reset+0x50>)
 80012ac:	f000 fd70 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ba:	f000 fd69 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2120      	movs	r1, #32
 80012c2:	4807      	ldr	r0, [pc, #28]	; (80012e0 <reset+0x50>)
 80012c4:	f000 fd64 	bl	8001d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d2:	f000 fd5d 	bl	8001d90 <HAL_GPIO_WritePin>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	48000400 	.word	0x48000400

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add their own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ec:	e7fe      	b.n	80012ec <Error_Handler+0x8>
	...

080012f0 <HAL_MspInit>:
	void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
						/**
	  * Initializes the Global MSP.
	  */
	void HAL_MspInit(void)
	{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
	  /* USER CODE BEGIN MspInit 0 */

	  /* USER CODE END MspInit 0 */

	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_MspInit+0x44>)
 80012f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <HAL_MspInit+0x44>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6613      	str	r3, [r2, #96]	; 0x60
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_MspInit+0x44>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_MspInit+0x44>)
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <HAL_MspInit+0x44>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001318:	6593      	str	r3, [r2, #88]	; 0x58
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_MspInit+0x44>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
	  /* System interrupt init*/

	  /* USER CODE BEGIN MspInit 1 */

	  /* USER CODE END MspInit 1 */
	}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_TIM_Base_MspInit>:
	* This function configures the hardware resources used in this example
	* @param htim_base: TIM_Base handle pointer
	* @retval None
	*/
	void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
	{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	  if(htim_base->Instance==TIM2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001348:	d113      	bne.n	8001372 <HAL_TIM_Base_MspInit+0x3a>
	  {
	  /* USER CODE BEGIN TIM2_MspInit 0 */

	  /* USER CODE END TIM2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_TIM_Base_MspInit+0x44>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	4a0b      	ldr	r2, [pc, #44]	; (800137c <HAL_TIM_Base_MspInit+0x44>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6593      	str	r3, [r2, #88]	; 0x58
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_TIM_Base_MspInit+0x44>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
		/* TIM2 interrupt Init */
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	201c      	movs	r0, #28
 8001368:	f000 fb59 	bl	8001a1e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800136c:	201c      	movs	r0, #28
 800136e:	f000 fb72 	bl	8001a56 <HAL_NVIC_EnableIRQ>
	  /* USER CODE BEGIN TIM2_MspInit 1 */

	  /* USER CODE END TIM2_MspInit 1 */
	  }

	}
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000

08001380 <HAL_TIM_MspPostInit>:

	void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
	{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
	  if(htim->Instance==TIM2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a0:	d11c      	bne.n	80013dc <HAL_TIM_MspPostInit+0x5c>
	  {
	  /* USER CODE BEGIN TIM2_MspPostInit 0 */

	  /* USER CODE END TIM2_MspPostInit 0 */

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_TIM_MspPostInit+0x64>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <HAL_TIM_MspPostInit+0x64>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_TIM_MspPostInit+0x64>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
		/**TIM2 GPIO Configuration
		PA3     ------> TIM2_CH4
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013ba:	2308      	movs	r3, #8
 80013bc:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	4619      	mov	r1, r3
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d8:	f000 fb58 	bl	8001a8c <HAL_GPIO_Init>
	  /* USER CODE BEGIN TIM2_MspPostInit 1 */

	  /* USER CODE END TIM2_MspPostInit 1 */
	  }

	}
 80013dc:	bf00      	nop
 80013de:	3720      	adds	r7, #32
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40021000 	.word	0x40021000

080013e8 <HAL_UART_MspInit>:
	* This function configures the hardware resources used in this example
	* @param huart: UART handle pointer
	* @retval None
	*/
	void HAL_UART_MspInit(UART_HandleTypeDef* huart)
	{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b09e      	sub	sp, #120	; 0x78
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
	  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	2254      	movs	r2, #84	; 0x54
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f003 fbef 	bl	8004bec <memset>
	  if(huart->Instance==USART2)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a28      	ldr	r2, [pc, #160]	; (80014b4 <HAL_UART_MspInit+0xcc>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d148      	bne.n	80014aa <HAL_UART_MspInit+0xc2>

	  /* USER CODE END USART2_MspInit 0 */

	  /** Initializes the peripherals clock
	  */
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001418:	2302      	movs	r3, #2
 800141a:	613b      	str	r3, [r7, #16]
		PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800141c:	2300      	movs	r3, #0
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4618      	mov	r0, r3
 8001426:	f001 fba9 	bl	8002b7c <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_UART_MspInit+0x4c>
		{
		  Error_Handler();
 8001430:	f7ff ff58 	bl	80012e4 <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 8001434:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <HAL_UART_MspInit+0xd0>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001438:	4a1f      	ldr	r2, [pc, #124]	; (80014b8 <HAL_UART_MspInit+0xd0>)
 800143a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143e:	6593      	str	r3, [r2, #88]	; 0x58
 8001440:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <HAL_UART_MspInit+0xd0>)
 8001442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <HAL_UART_MspInit+0xd0>)
 800144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001450:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <HAL_UART_MspInit+0xd0>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <HAL_UART_MspInit+0xd0>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
		/**USART2 GPIO Configuration
		PA2     ------> USART2_TX
		PA15 (JTDI)     ------> USART2_RX
		*/
		GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001464:	2304      	movs	r3, #4
 8001466:	667b      	str	r3, [r7, #100]	; 0x64
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	66bb      	str	r3, [r7, #104]	; 0x68
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	66fb      	str	r3, [r7, #108]	; 0x6c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	673b      	str	r3, [r7, #112]	; 0x70
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001474:	2307      	movs	r3, #7
 8001476:	677b      	str	r3, [r7, #116]	; 0x74
		HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800147c:	4619      	mov	r1, r3
 800147e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001482:	f000 fb03 	bl	8001a8c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800148a:	667b      	str	r3, [r7, #100]	; 0x64
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	66bb      	str	r3, [r7, #104]	; 0x68
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	66fb      	str	r3, [r7, #108]	; 0x6c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	673b      	str	r3, [r7, #112]	; 0x70
		GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001498:	2303      	movs	r3, #3
 800149a:	677b      	str	r3, [r7, #116]	; 0x74
		HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014a0:	4619      	mov	r1, r3
 80014a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a6:	f000 faf1 	bl	8001a8c <HAL_GPIO_Init>
	  /* USER CODE BEGIN USART2_MspInit 1 */

	  /* USER CODE END USART2_MspInit 1 */
	  }

	}
 80014aa:	bf00      	nop
 80014ac:	3778      	adds	r7, #120	; 0x78
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40004400 	.word	0x40004400
 80014b8:	40021000 	.word	0x40021000

080014bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <NMI_Handler+0x4>

080014c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <HardFault_Handler+0x4>

080014c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <MemManage_Handler+0x4>

080014ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <BusFault_Handler+0x4>

080014d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <UsageFault_Handler+0x4>

080014da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001508:	f000 f96a 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001514:	2020      	movs	r0, #32
 8001516:	f000 fc6d 	bl	8001df4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <TIM2_IRQHandler+0x10>)
 8001526:	f001 ffb7 	bl	8003498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000090 	.word	0x20000090

08001534 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return 1;
 8001538:	2301      	movs	r3, #1
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <_kill>:

int _kill(int pid, int sig)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800154e:	f003 fb23 	bl	8004b98 <__errno>
 8001552:	4603      	mov	r3, r0
 8001554:	2216      	movs	r2, #22
 8001556:	601a      	str	r2, [r3, #0]
  return -1;
 8001558:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_exit>:

void _exit (int status)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800156c:	f04f 31ff 	mov.w	r1, #4294967295
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ffe7 	bl	8001544 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001576:	e7fe      	b.n	8001576 <_exit+0x12>

08001578 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e00a      	b.n	80015a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800158a:	f3af 8000 	nop.w
 800158e:	4601      	mov	r1, r0
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	60ba      	str	r2, [r7, #8]
 8001596:	b2ca      	uxtb	r2, r1
 8001598:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbf0      	blt.n	800158a <_read+0x12>
  }

  return len;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	e009      	b.n	80015d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	60ba      	str	r2, [r7, #8]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	dbf1      	blt.n	80015c4 <_write+0x12>
  }
  return len;
 80015e0:	687b      	ldr	r3, [r7, #4]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <_close>:

int _close(int file)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001612:	605a      	str	r2, [r3, #4]
  return 0;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_isatty>:

int _isatty(int file)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800165c:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <_sbrk+0x5c>)
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <_sbrk+0x60>)
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <_sbrk+0x64>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <_sbrk+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	429a      	cmp	r2, r3
 8001682:	d207      	bcs.n	8001694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001684:	f003 fa88 	bl	8004b98 <__errno>
 8001688:	4603      	mov	r3, r0
 800168a:	220c      	movs	r2, #12
 800168c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	e009      	b.n	80016a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <_sbrk+0x64>)
 80016a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20010000 	.word	0x20010000
 80016b4:	00000400 	.word	0x00000400
 80016b8:	20000160 	.word	0x20000160
 80016bc:	20000178 	.word	0x20000178

080016c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <Reset_Handler>:

	    .section	.text.Reset_Handler
		.weak	Reset_Handler
		.type	Reset_Handler, %function
	Reset_Handler:
	  ldr   sp, =_estack    /* Set stack pointer */
 80016e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800171c <LoopForever+0x2>

	/* Call the clock system initialization function.*/
	    bl  SystemInit
 80016e8:	f7ff ffea 	bl	80016c0 <SystemInit>

	/* Copy the data segment initializers from flash to SRAM */
	  ldr r0, =_sdata
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <LoopForever+0x6>)
	  ldr r1, =_edata
 80016ee:	490d      	ldr	r1, [pc, #52]	; (8001724 <LoopForever+0xa>)
	  ldr r2, =_sidata
 80016f0:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <LoopForever+0xe>)
	  movs r3, #0
 80016f2:	2300      	movs	r3, #0
	  b LoopCopyDataInit
 80016f4:	e002      	b.n	80016fc <LoopCopyDataInit>

080016f6 <CopyDataInit>:

	CopyDataInit:
	  ldr r4, [r2, r3]
 80016f6:	58d4      	ldr	r4, [r2, r3]
	  str r4, [r0, r3]
 80016f8:	50c4      	str	r4, [r0, r3]
	  adds r3, r3, #4
 80016fa:	3304      	adds	r3, #4

080016fc <LoopCopyDataInit>:

	LoopCopyDataInit:
	  adds r4, r0, r3
 80016fc:	18c4      	adds	r4, r0, r3
	  cmp r4, r1
 80016fe:	428c      	cmp	r4, r1
	  bcc CopyDataInit
 8001700:	d3f9      	bcc.n	80016f6 <CopyDataInit>

	/* Zero fill the bss segment. */
	  ldr r2, =_sbss
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <LoopForever+0x12>)
	  ldr r4, =_ebss
 8001704:	4c0a      	ldr	r4, [pc, #40]	; (8001730 <LoopForever+0x16>)
	  movs r3, #0
 8001706:	2300      	movs	r3, #0
	  b LoopFillZerobss
 8001708:	e001      	b.n	800170e <LoopFillZerobss>

0800170a <FillZerobss>:

	FillZerobss:
	  str  r3, [r2]
 800170a:	6013      	str	r3, [r2, #0]
	  adds r2, r2, #4
 800170c:	3204      	adds	r2, #4

0800170e <LoopFillZerobss>:

	LoopFillZerobss:
	  cmp r2, r4
 800170e:	42a2      	cmp	r2, r4
	  bcc FillZerobss
 8001710:	d3fb      	bcc.n	800170a <FillZerobss>

	/* Call static constructors */
	    bl __libc_init_array
 8001712:	f003 fa47 	bl	8004ba4 <__libc_init_array>
	/* Call the application's entry point.*/
		bl	main
 8001716:	f7ff fa9b 	bl	8000c50 <main>

0800171a <LoopForever>:

	LoopForever:
	    b LoopForever
 800171a:	e7fe      	b.n	800171a <LoopForever>
	  ldr   sp, =_estack    /* Set stack pointer */
 800171c:	20010000 	.word	0x20010000
	  ldr r0, =_sdata
 8001720:	20000000 	.word	0x20000000
	  ldr r1, =_edata
 8001724:	20000074 	.word	0x20000074
	  ldr r2, =_sidata
 8001728:	08005ee8 	.word	0x08005ee8
	  ldr r2, =_sbss
 800172c:	20000074 	.word	0x20000074
	  ldr r4, =_ebss
 8001730:	20000178 	.word	0x20000178

08001734 <ADC1_IRQHandler>:
	 * @retval : None
	*/
	    .section	.text.Default_Handler,"ax",%progbits
	Default_Handler:
	Infinite_Loop:
		b	Infinite_Loop
 8001734:	e7fe      	b.n	8001734 <ADC1_IRQHandler>

08001736 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001740:	2003      	movs	r0, #3
 8001742:	f000 f961 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001746:	2000      	movs	r0, #0
 8001748:	f000 f80e 	bl	8001768 <HAL_InitTick>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	e001      	b.n	800175c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001758:	f7ff fdca 	bl	80012f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800175c:	79fb      	ldrb	r3, [r7, #7]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_InitTick+0x6c>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d023      	beq.n	80017c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <HAL_InitTick+0x70>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_InitTick+0x6c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178a:	fbb3 f3f1 	udiv	r3, r3, r1
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f96d 	bl	8001a72 <HAL_SYSTICK_Config>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10f      	bne.n	80017be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b0f      	cmp	r3, #15
 80017a2:	d809      	bhi.n	80017b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a4:	2200      	movs	r2, #0
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f000 f937 	bl	8001a1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_InitTick+0x74>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e007      	b.n	80017c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
 80017bc:	e004      	b.n	80017c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	73fb      	strb	r3, [r7, #15]
 80017c2:	e001      	b.n	80017c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000000c 	.word	0x2000000c
 80017d8:	20000004 	.word	0x20000004
 80017dc:	20000008 	.word	0x20000008

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2000000c 	.word	0x2000000c
 8001804:	20000164 	.word	0x20000164

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000164 	.word	0x20000164

08001820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001828:	f7ff ffee 	bl	8001808 <HAL_GetTick>
 800182c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001838:	d005      	beq.n	8001846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_Delay+0x44>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001846:	bf00      	nop
 8001848:	f7ff ffde 	bl	8001808 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	429a      	cmp	r2, r3
 8001856:	d8f7      	bhi.n	8001848 <HAL_Delay+0x28>
  {
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2000000c 	.word	0x2000000c

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	; (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4907      	ldr	r1, [pc, #28]	; (8001904 <__NVIC_EnableIRQ+0x38>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff29 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff3e 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff8e 	bl	800195c <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff31 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa2 	bl	80019c4 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9a:	e148      	b.n	8001d2e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 813a 	beq.w	8001d28 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d005      	beq.n	8001acc <HAL_GPIO_Init+0x40>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d130      	bne.n	8001b2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68da      	ldr	r2, [r3, #12]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b02:	2201      	movs	r2, #1
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	091b      	lsrs	r3, r3, #4
 8001b18:	f003 0201 	and.w	r2, r3, #1
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d017      	beq.n	8001b6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	2203      	movs	r2, #3
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d123      	bne.n	8001bbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	08da      	lsrs	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3208      	adds	r2, #8
 8001b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	08da      	lsrs	r2, r3, #3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3208      	adds	r2, #8
 8001bb8:	6939      	ldr	r1, [r7, #16]
 8001bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	2203      	movs	r2, #3
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0203 	and.w	r2, r3, #3
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 8094 	beq.w	8001d28 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c00:	4b52      	ldr	r3, [pc, #328]	; (8001d4c <HAL_GPIO_Init+0x2c0>)
 8001c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c04:	4a51      	ldr	r2, [pc, #324]	; (8001d4c <HAL_GPIO_Init+0x2c0>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6613      	str	r3, [r2, #96]	; 0x60
 8001c0c:	4b4f      	ldr	r3, [pc, #316]	; (8001d4c <HAL_GPIO_Init+0x2c0>)
 8001c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c18:	4a4d      	ldr	r2, [pc, #308]	; (8001d50 <HAL_GPIO_Init+0x2c4>)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	3302      	adds	r3, #2
 8001c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	220f      	movs	r2, #15
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c42:	d00d      	beq.n	8001c60 <HAL_GPIO_Init+0x1d4>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a43      	ldr	r2, [pc, #268]	; (8001d54 <HAL_GPIO_Init+0x2c8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d007      	beq.n	8001c5c <HAL_GPIO_Init+0x1d0>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a42      	ldr	r2, [pc, #264]	; (8001d58 <HAL_GPIO_Init+0x2cc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d101      	bne.n	8001c58 <HAL_GPIO_Init+0x1cc>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e004      	b.n	8001c62 <HAL_GPIO_Init+0x1d6>
 8001c58:	2307      	movs	r3, #7
 8001c5a:	e002      	b.n	8001c62 <HAL_GPIO_Init+0x1d6>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <HAL_GPIO_Init+0x1d6>
 8001c60:	2300      	movs	r3, #0
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	f002 0203 	and.w	r2, r2, #3
 8001c68:	0092      	lsls	r2, r2, #2
 8001c6a:	4093      	lsls	r3, r2
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c72:	4937      	ldr	r1, [pc, #220]	; (8001d50 <HAL_GPIO_Init+0x2c4>)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3302      	adds	r3, #2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c80:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ca4:	4a2d      	ldr	r2, [pc, #180]	; (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001caa:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cce:	4a23      	ldr	r2, [pc, #140]	; (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cf8:	4a18      	ldr	r2, [pc, #96]	; (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d22:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <HAL_GPIO_Init+0x2d0>)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f47f aeaf 	bne.w	8001a9c <HAL_GPIO_Init+0x10>
  }
}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010000 	.word	0x40010000
 8001d54:	48000400 	.word	0x48000400
 8001d58:	48000800 	.word	0x48000800
 8001d5c:	40010400 	.word	0x40010400

08001d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	e001      	b.n	8001d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dac:	e002      	b.n	8001db4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	041a      	lsls	r2, r3, #16
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	43d9      	mvns	r1, r3
 8001dde:	887b      	ldrh	r3, [r7, #2]
 8001de0:	400b      	ands	r3, r1
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	619a      	str	r2, [r3, #24]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d006      	beq.n	8001e18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fa20 	bl	8001258 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40010400 	.word	0x40010400

08001e24 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40007000 	.word	0x40007000

08001e44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40007000 	.word	0x40007000

08001e60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e6e:	d130      	bne.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e70:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e7c:	d038      	beq.n	8001ef0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e7e:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e86:	4a1e      	ldr	r2, [pc, #120]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2232      	movs	r2, #50	; 0x32
 8001e94:	fb02 f303 	mul.w	r3, r2, r3
 8001e98:	4a1b      	ldr	r2, [pc, #108]	; (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	0c9b      	lsrs	r3, r3, #18
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ea4:	e002      	b.n	8001eac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb8:	d102      	bne.n	8001ec0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f2      	bne.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ecc:	d110      	bne.n	8001ef0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e00f      	b.n	8001ef2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ede:	d007      	beq.n	8001ef0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ee8:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40007000 	.word	0x40007000
 8001f04:	20000004 	.word	0x20000004
 8001f08:	431bde83 	.word	0x431bde83

08001f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f000 bc02 	b.w	8002724 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f20:	4b96      	ldr	r3, [pc, #600]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f2a:	4b94      	ldr	r3, [pc, #592]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80e4 	beq.w	800210a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <HAL_RCC_OscConfig+0x4c>
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2b0c      	cmp	r3, #12
 8001f4c:	f040 808b 	bne.w	8002066 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	f040 8087 	bne.w	8002066 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f58:	4b88      	ldr	r3, [pc, #544]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_OscConfig+0x64>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e3d9      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a1a      	ldr	r2, [r3, #32]
 8001f74:	4b81      	ldr	r3, [pc, #516]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d004      	beq.n	8001f8a <HAL_RCC_OscConfig+0x7e>
 8001f80:	4b7e      	ldr	r3, [pc, #504]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f88:	e005      	b.n	8001f96 <HAL_RCC_OscConfig+0x8a>
 8001f8a:	4b7c      	ldr	r3, [pc, #496]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d223      	bcs.n	8001fe2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 fd8c 	bl	8002abc <RCC_SetFlashLatencyFromMSIRange>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e3ba      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fae:	4b73      	ldr	r3, [pc, #460]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a72      	ldr	r2, [pc, #456]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001fb4:	f043 0308 	orr.w	r3, r3, #8
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b70      	ldr	r3, [pc, #448]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	496d      	ldr	r1, [pc, #436]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fcc:	4b6b      	ldr	r3, [pc, #428]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	4968      	ldr	r1, [pc, #416]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
 8001fe0:	e025      	b.n	800202e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fe2:	4b66      	ldr	r3, [pc, #408]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a65      	ldr	r2, [pc, #404]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001fe8:	f043 0308 	orr.w	r3, r3, #8
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b63      	ldr	r3, [pc, #396]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4960      	ldr	r1, [pc, #384]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002000:	4b5e      	ldr	r3, [pc, #376]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	495b      	ldr	r1, [pc, #364]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fd4c 	bl	8002abc <RCC_SetFlashLatencyFromMSIRange>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e37a      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800202e:	f000 fc81 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 8002032:	4602      	mov	r2, r0
 8002034:	4b51      	ldr	r3, [pc, #324]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	4950      	ldr	r1, [pc, #320]	; (8002180 <HAL_RCC_OscConfig+0x274>)
 8002040:	5ccb      	ldrb	r3, [r1, r3]
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	fa22 f303 	lsr.w	r3, r2, r3
 800204a:	4a4e      	ldr	r2, [pc, #312]	; (8002184 <HAL_RCC_OscConfig+0x278>)
 800204c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800204e:	4b4e      	ldr	r3, [pc, #312]	; (8002188 <HAL_RCC_OscConfig+0x27c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fb88 	bl	8001768 <HAL_InitTick>
 8002058:	4603      	mov	r3, r0
 800205a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d052      	beq.n	8002108 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	e35e      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d032      	beq.n	80020d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800206e:	4b43      	ldr	r3, [pc, #268]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a42      	ldr	r2, [pc, #264]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800207a:	f7ff fbc5 	bl	8001808 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002082:	f7ff fbc1 	bl	8001808 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e347      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002094:	4b39      	ldr	r3, [pc, #228]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020a0:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a35      	ldr	r2, [pc, #212]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020a6:	f043 0308 	orr.w	r3, r3, #8
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	4b33      	ldr	r3, [pc, #204]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4930      	ldr	r1, [pc, #192]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020be:	4b2f      	ldr	r3, [pc, #188]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	492b      	ldr	r1, [pc, #172]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
 80020d2:	e01a      	b.n	800210a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020d4:	4b29      	ldr	r3, [pc, #164]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a28      	ldr	r2, [pc, #160]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fb92 	bl	8001808 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020e8:	f7ff fb8e 	bl	8001808 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e314      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020fa:	4b20      	ldr	r3, [pc, #128]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x1dc>
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002108:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d073      	beq.n	80021fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	2b08      	cmp	r3, #8
 800211a:	d005      	beq.n	8002128 <HAL_RCC_OscConfig+0x21c>
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d10e      	bne.n	8002140 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d10b      	bne.n	8002140 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <HAL_RCC_OscConfig+0x270>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d063      	beq.n	80021fc <HAL_RCC_OscConfig+0x2f0>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d15f      	bne.n	80021fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e2f1      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002148:	d106      	bne.n	8002158 <HAL_RCC_OscConfig+0x24c>
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HAL_RCC_OscConfig+0x270>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a0b      	ldr	r2, [pc, #44]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e025      	b.n	80021a4 <HAL_RCC_OscConfig+0x298>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002160:	d114      	bne.n	800218c <HAL_RCC_OscConfig+0x280>
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a05      	ldr	r2, [pc, #20]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a02      	ldr	r2, [pc, #8]	; (800217c <HAL_RCC_OscConfig+0x270>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e013      	b.n	80021a4 <HAL_RCC_OscConfig+0x298>
 800217c:	40021000 	.word	0x40021000
 8002180:	08005d48 	.word	0x08005d48
 8002184:	20000004 	.word	0x20000004
 8002188:	20000008 	.word	0x20000008
 800218c:	4ba0      	ldr	r3, [pc, #640]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a9f      	ldr	r2, [pc, #636]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b9d      	ldr	r3, [pc, #628]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a9c      	ldr	r2, [pc, #624]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800219e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff fb2c 	bl	8001808 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7ff fb28 	bl	8001808 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e2ae      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c6:	4b92      	ldr	r3, [pc, #584]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x2a8>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7ff fb18 	bl	8001808 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff fb14 	bl	8001808 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e29a      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ee:	4b88      	ldr	r3, [pc, #544]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x2d0>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d060      	beq.n	80022cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d005      	beq.n	800221c <HAL_RCC_OscConfig+0x310>
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	2b0c      	cmp	r3, #12
 8002214:	d119      	bne.n	800224a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d116      	bne.n	800224a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800221c:	4b7c      	ldr	r3, [pc, #496]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_OscConfig+0x328>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e277      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002234:	4b76      	ldr	r3, [pc, #472]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	061b      	lsls	r3, r3, #24
 8002242:	4973      	ldr	r1, [pc, #460]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002248:	e040      	b.n	80022cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d023      	beq.n	800229a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002252:	4b6f      	ldr	r3, [pc, #444]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a6e      	ldr	r2, [pc, #440]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7ff fad3 	bl	8001808 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002266:	f7ff facf 	bl	8001808 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e255      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002278:	4b65      	ldr	r3, [pc, #404]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	4b62      	ldr	r3, [pc, #392]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	495f      	ldr	r1, [pc, #380]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
 8002298:	e018      	b.n	80022cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229a:	4b5d      	ldr	r3, [pc, #372]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a5c      	ldr	r2, [pc, #368]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80022a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7ff faaf 	bl	8001808 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ae:	f7ff faab 	bl	8001808 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e231      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022c0:	4b53      	ldr	r3, [pc, #332]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f0      	bne.n	80022ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d03c      	beq.n	8002352 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01c      	beq.n	800231a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e0:	4b4b      	ldr	r3, [pc, #300]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80022e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e6:	4a4a      	ldr	r2, [pc, #296]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f0:	f7ff fa8a 	bl	8001808 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f8:	f7ff fa86 	bl	8001808 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e20c      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800230a:	4b41      	ldr	r3, [pc, #260]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800230c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ef      	beq.n	80022f8 <HAL_RCC_OscConfig+0x3ec>
 8002318:	e01b      	b.n	8002352 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231a:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800231c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002320:	4a3b      	ldr	r2, [pc, #236]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232a:	f7ff fa6d 	bl	8001808 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002332:	f7ff fa69 	bl	8001808 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e1ef      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002344:	4b32      	ldr	r3, [pc, #200]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1ef      	bne.n	8002332 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80a6 	beq.w	80024ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002360:	2300      	movs	r3, #0
 8002362:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002364:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10d      	bne.n	800238c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	4a26      	ldr	r2, [pc, #152]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237a:	6593      	str	r3, [r2, #88]	; 0x58
 800237c:	4b24      	ldr	r3, [pc, #144]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002388:	2301      	movs	r3, #1
 800238a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238c:	4b21      	ldr	r3, [pc, #132]	; (8002414 <HAL_RCC_OscConfig+0x508>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d118      	bne.n	80023ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002398:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <HAL_RCC_OscConfig+0x508>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1d      	ldr	r2, [pc, #116]	; (8002414 <HAL_RCC_OscConfig+0x508>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a4:	f7ff fa30 	bl	8001808 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ac:	f7ff fa2c 	bl	8001808 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e1b2      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023be:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_RCC_OscConfig+0x508>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d108      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4d8>
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	4a0d      	ldr	r2, [pc, #52]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e2:	e029      	b.n	8002438 <HAL_RCC_OscConfig+0x52c>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d115      	bne.n	8002418 <HAL_RCC_OscConfig+0x50c>
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	4a07      	ldr	r2, [pc, #28]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002402:	4a03      	ldr	r2, [pc, #12]	; (8002410 <HAL_RCC_OscConfig+0x504>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800240c:	e014      	b.n	8002438 <HAL_RCC_OscConfig+0x52c>
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	40007000 	.word	0x40007000
 8002418:	4b9a      	ldr	r3, [pc, #616]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	4a99      	ldr	r2, [pc, #612]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002428:	4b96      	ldr	r3, [pc, #600]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	4a95      	ldr	r2, [pc, #596]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 8002430:	f023 0304 	bic.w	r3, r3, #4
 8002434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d016      	beq.n	800246e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7ff f9e2 	bl	8001808 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002446:	e00a      	b.n	800245e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002448:	f7ff f9de 	bl	8001808 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	; 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e162      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800245e:	4b89      	ldr	r3, [pc, #548]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 8002460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0ed      	beq.n	8002448 <HAL_RCC_OscConfig+0x53c>
 800246c:	e015      	b.n	800249a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246e:	f7ff f9cb 	bl	8001808 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7ff f9c7 	bl	8001808 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	; 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e14b      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800248c:	4b7d      	ldr	r3, [pc, #500]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1ed      	bne.n	8002476 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800249a:	7ffb      	ldrb	r3, [r7, #31]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d105      	bne.n	80024ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a0:	4b78      	ldr	r3, [pc, #480]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	4a77      	ldr	r2, [pc, #476]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 80024a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d03c      	beq.n	8002532 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d01c      	beq.n	80024fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024c0:	4b70      	ldr	r3, [pc, #448]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 80024c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024c6:	4a6f      	ldr	r2, [pc, #444]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d0:	f7ff f99a 	bl	8001808 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024d8:	f7ff f996 	bl	8001808 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e11c      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ea:	4b66      	ldr	r3, [pc, #408]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 80024ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0ef      	beq.n	80024d8 <HAL_RCC_OscConfig+0x5cc>
 80024f8:	e01b      	b.n	8002532 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024fa:	4b62      	ldr	r3, [pc, #392]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 80024fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002500:	4a60      	ldr	r2, [pc, #384]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250a:	f7ff f97d 	bl	8001808 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002512:	f7ff f979 	bl	8001808 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0ff      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002524:	4b57      	ldr	r3, [pc, #348]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 8002526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1ef      	bne.n	8002512 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80f3 	beq.w	8002722 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	2b02      	cmp	r3, #2
 8002542:	f040 80c9 	bne.w	80026d8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002546:	4b4f      	ldr	r3, [pc, #316]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f003 0203 	and.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	429a      	cmp	r2, r3
 8002558:	d12c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	3b01      	subs	r3, #1
 8002566:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d123      	bne.n	80025b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002576:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d11b      	bne.n	80025b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002586:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d113      	bne.n	80025b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	085b      	lsrs	r3, r3, #1
 8002598:	3b01      	subs	r3, #1
 800259a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d109      	bne.n	80025b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	085b      	lsrs	r3, r3, #1
 80025ac:	3b01      	subs	r3, #1
 80025ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d06b      	beq.n	800268c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	d062      	beq.n	8002680 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025ba:	4b32      	ldr	r3, [pc, #200]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e0ac      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025ca:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a2d      	ldr	r2, [pc, #180]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 80025d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025d6:	f7ff f917 	bl	8001808 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025de:	f7ff f913 	bl	8001808 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e099      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f0:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fc:	4b21      	ldr	r3, [pc, #132]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	4b21      	ldr	r3, [pc, #132]	; (8002688 <HAL_RCC_OscConfig+0x77c>)
 8002602:	4013      	ands	r3, r2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800260c:	3a01      	subs	r2, #1
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	4311      	orrs	r1, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002616:	0212      	lsls	r2, r2, #8
 8002618:	4311      	orrs	r1, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800261e:	0852      	lsrs	r2, r2, #1
 8002620:	3a01      	subs	r2, #1
 8002622:	0552      	lsls	r2, r2, #21
 8002624:	4311      	orrs	r1, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800262a:	0852      	lsrs	r2, r2, #1
 800262c:	3a01      	subs	r2, #1
 800262e:	0652      	lsls	r2, r2, #25
 8002630:	4311      	orrs	r1, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002636:	06d2      	lsls	r2, r2, #27
 8002638:	430a      	orrs	r2, r1
 800263a:	4912      	ldr	r1, [pc, #72]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 800263c:	4313      	orrs	r3, r2
 800263e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002640:	4b10      	ldr	r3, [pc, #64]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0f      	ldr	r2, [pc, #60]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 8002646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800264a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800264c:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4a0c      	ldr	r2, [pc, #48]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 8002652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002656:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002658:	f7ff f8d6 	bl	8001808 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002660:	f7ff f8d2 	bl	8001808 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e058      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002672:	4b04      	ldr	r3, [pc, #16]	; (8002684 <HAL_RCC_OscConfig+0x778>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800267e:	e050      	b.n	8002722 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e04f      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
 8002684:	40021000 	.word	0x40021000
 8002688:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <HAL_RCC_OscConfig+0x820>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d144      	bne.n	8002722 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002698:	4b24      	ldr	r3, [pc, #144]	; (800272c <HAL_RCC_OscConfig+0x820>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a23      	ldr	r2, [pc, #140]	; (800272c <HAL_RCC_OscConfig+0x820>)
 800269e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026a4:	4b21      	ldr	r3, [pc, #132]	; (800272c <HAL_RCC_OscConfig+0x820>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a20      	ldr	r2, [pc, #128]	; (800272c <HAL_RCC_OscConfig+0x820>)
 80026aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026b0:	f7ff f8aa 	bl	8001808 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b8:	f7ff f8a6 	bl	8001808 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e02c      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ca:	4b18      	ldr	r3, [pc, #96]	; (800272c <HAL_RCC_OscConfig+0x820>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x7ac>
 80026d6:	e024      	b.n	8002722 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d01f      	beq.n	800271e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <HAL_RCC_OscConfig+0x820>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <HAL_RCC_OscConfig+0x820>)
 80026e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7ff f88d 	bl	8001808 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f2:	f7ff f889 	bl	8001808 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e00f      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <HAL_RCC_OscConfig+0x820>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_RCC_OscConfig+0x820>)
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	4905      	ldr	r1, [pc, #20]	; (800272c <HAL_RCC_OscConfig+0x820>)
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_RCC_OscConfig+0x824>)
 8002718:	4013      	ands	r3, r2
 800271a:	60cb      	str	r3, [r1, #12]
 800271c:	e001      	b.n	8002722 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3720      	adds	r7, #32
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000
 8002730:	feeefffc 	.word	0xfeeefffc

08002734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0e7      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002748:	4b75      	ldr	r3, [pc, #468]	; (8002920 <HAL_RCC_ClockConfig+0x1ec>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d910      	bls.n	8002778 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b72      	ldr	r3, [pc, #456]	; (8002920 <HAL_RCC_ClockConfig+0x1ec>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 0207 	bic.w	r2, r3, #7
 800275e:	4970      	ldr	r1, [pc, #448]	; (8002920 <HAL_RCC_ClockConfig+0x1ec>)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b6e      	ldr	r3, [pc, #440]	; (8002920 <HAL_RCC_ClockConfig+0x1ec>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0cf      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d010      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	4b66      	ldr	r3, [pc, #408]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002790:	429a      	cmp	r2, r3
 8002792:	d908      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002794:	4b63      	ldr	r3, [pc, #396]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4960      	ldr	r1, [pc, #384]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d04c      	beq.n	800284c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ba:	4b5a      	ldr	r3, [pc, #360]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d121      	bne.n	800280a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e0a6      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027d2:	4b54      	ldr	r3, [pc, #336]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d115      	bne.n	800280a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e09a      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ea:	4b4e      	ldr	r3, [pc, #312]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e08e      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027fa:	4b4a      	ldr	r3, [pc, #296]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e086      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800280a:	4b46      	ldr	r3, [pc, #280]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f023 0203 	bic.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4943      	ldr	r1, [pc, #268]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 8002818:	4313      	orrs	r3, r2
 800281a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800281c:	f7fe fff4 	bl	8001808 <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	e00a      	b.n	800283a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	f7fe fff0 	bl	8001808 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e06e      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 020c 	and.w	r2, r3, #12
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	429a      	cmp	r2, r3
 800284a:	d1eb      	bne.n	8002824 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d010      	beq.n	800287a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	4b31      	ldr	r3, [pc, #196]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002864:	429a      	cmp	r2, r3
 8002866:	d208      	bcs.n	800287a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002868:	4b2e      	ldr	r3, [pc, #184]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	492b      	ldr	r1, [pc, #172]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800287a:	4b29      	ldr	r3, [pc, #164]	; (8002920 <HAL_RCC_ClockConfig+0x1ec>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d210      	bcs.n	80028aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002888:	4b25      	ldr	r3, [pc, #148]	; (8002920 <HAL_RCC_ClockConfig+0x1ec>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 0207 	bic.w	r2, r3, #7
 8002890:	4923      	ldr	r1, [pc, #140]	; (8002920 <HAL_RCC_ClockConfig+0x1ec>)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002898:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_RCC_ClockConfig+0x1ec>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d001      	beq.n	80028aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e036      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b6:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	4918      	ldr	r1, [pc, #96]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d009      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028d4:	4b13      	ldr	r3, [pc, #76]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4910      	ldr	r1, [pc, #64]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028e8:	f000 f824 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	490b      	ldr	r1, [pc, #44]	; (8002928 <HAL_RCC_ClockConfig+0x1f4>)
 80028fa:	5ccb      	ldrb	r3, [r1, r3]
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
 8002904:	4a09      	ldr	r2, [pc, #36]	; (800292c <HAL_RCC_ClockConfig+0x1f8>)
 8002906:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_RCC_ClockConfig+0x1fc>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe ff2b 	bl	8001768 <HAL_InitTick>
 8002912:	4603      	mov	r3, r0
 8002914:	72fb      	strb	r3, [r7, #11]

  return status;
 8002916:	7afb      	ldrb	r3, [r7, #11]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40022000 	.word	0x40022000
 8002924:	40021000 	.word	0x40021000
 8002928:	08005d48 	.word	0x08005d48
 800292c:	20000004 	.word	0x20000004
 8002930:	20000008 	.word	0x20000008

08002934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	; 0x24
 8002938:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002942:	4b3e      	ldr	r3, [pc, #248]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800294c:	4b3b      	ldr	r3, [pc, #236]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x34>
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	2b0c      	cmp	r3, #12
 8002960:	d121      	bne.n	80029a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d11e      	bne.n	80029a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002968:	4b34      	ldr	r3, [pc, #208]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d107      	bne.n	8002984 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002974:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	e005      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002984:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002990:	4a2b      	ldr	r2, [pc, #172]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002998:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10d      	bne.n	80029bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029a4:	e00a      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d102      	bne.n	80029b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029ac:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x110>)
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	e004      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029b8:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x114>)
 80029ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d134      	bne.n	8002a2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029c2:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d003      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0xa6>
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d003      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0xac>
 80029d8:	e005      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029da:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x110>)
 80029dc:	617b      	str	r3, [r7, #20]
      break;
 80029de:	e005      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029e0:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x114>)
 80029e2:	617b      	str	r3, [r7, #20]
      break;
 80029e4:	e002      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	617b      	str	r3, [r7, #20]
      break;
 80029ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029ec:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	3301      	adds	r3, #1
 80029f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029fa:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	fb03 f202 	mul.w	r2, r3, r2
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a12:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	0e5b      	lsrs	r3, r3, #25
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a2c:	69bb      	ldr	r3, [r7, #24]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3724      	adds	r7, #36	; 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	08005d60 	.word	0x08005d60
 8002a44:	00f42400 	.word	0x00f42400
 8002a48:	007a1200 	.word	0x007a1200

08002a4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000004 	.word	0x20000004

08002a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a68:	f7ff fff0 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	4904      	ldr	r1, [pc, #16]	; (8002a8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a7a:	5ccb      	ldrb	r3, [r1, r3]
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	08005d58 	.word	0x08005d58

08002a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a94:	f7ff ffda 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	0adb      	lsrs	r3, r3, #11
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4904      	ldr	r1, [pc, #16]	; (8002ab8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	08005d58 	.word	0x08005d58

08002abc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ac8:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ad4:	f7ff f9b6 	bl	8001e44 <HAL_PWREx_GetVoltageRange>
 8002ad8:	6178      	str	r0, [r7, #20]
 8002ada:	e014      	b.n	8002b06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002adc:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae0:	4a24      	ldr	r2, [pc, #144]	; (8002b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ae8:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002af4:	f7ff f9a6 	bl	8001e44 <HAL_PWREx_GetVoltageRange>
 8002af8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002afa:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afe:	4a1d      	ldr	r2, [pc, #116]	; (8002b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b0c:	d10b      	bne.n	8002b26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b80      	cmp	r3, #128	; 0x80
 8002b12:	d919      	bls.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2ba0      	cmp	r3, #160	; 0xa0
 8002b18:	d902      	bls.n	8002b20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	e013      	b.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b20:	2301      	movs	r3, #1
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	e010      	b.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d902      	bls.n	8002b32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	e00a      	b.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b80      	cmp	r3, #128	; 0x80
 8002b36:	d102      	bne.n	8002b3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b38:	2302      	movs	r3, #2
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	e004      	b.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b70      	cmp	r3, #112	; 0x70
 8002b42:	d101      	bne.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b44:	2301      	movs	r3, #1
 8002b46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 0207 	bic.w	r2, r3, #7
 8002b50:	4909      	ldr	r1, [pc, #36]	; (8002b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b58:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d001      	beq.n	8002b6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40022000 	.word	0x40022000

08002b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b84:	2300      	movs	r3, #0
 8002b86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b88:	2300      	movs	r3, #0
 8002b8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d031      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ba0:	d01a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002ba2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ba6:	d814      	bhi.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d009      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bb0:	d10f      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002bb2:	4b5d      	ldr	r3, [pc, #372]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	4a5c      	ldr	r2, [pc, #368]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bbe:	e00c      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 f9de 	bl	8002f88 <RCCEx_PLLSAI1_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bd0:	e003      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	74fb      	strb	r3, [r7, #19]
      break;
 8002bd6:	e000      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002bd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bda:	7cfb      	ldrb	r3, [r7, #19]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10b      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002be0:	4b51      	ldr	r3, [pc, #324]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	494e      	ldr	r1, [pc, #312]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bf6:	e001      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf8:	7cfb      	ldrb	r3, [r7, #19]
 8002bfa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 809e 	beq.w	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c0e:	4b46      	ldr	r3, [pc, #280]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00d      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c28:	4a3f      	ldr	r2, [pc, #252]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c30:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c40:	4b3a      	ldr	r3, [pc, #232]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a39      	ldr	r2, [pc, #228]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c4c:	f7fe fddc 	bl	8001808 <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c52:	e009      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c54:	f7fe fdd8 	bl	8001808 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d902      	bls.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	74fb      	strb	r3, [r7, #19]
        break;
 8002c66:	e005      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c68:	4b30      	ldr	r3, [pc, #192]	; (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ef      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d15a      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c7a:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01e      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d019      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c96:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ca2:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca8:	4a1f      	ldr	r2, [pc, #124]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb8:	4a1b      	ldr	r2, [pc, #108]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cc2:	4a19      	ldr	r2, [pc, #100]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d016      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fd98 	bl	8001808 <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cdc:	f7fe fd94 	bl	8001808 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d902      	bls.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	74fb      	strb	r3, [r7, #19]
            break;
 8002cf2:	e006      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0ec      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002d02:	7cfb      	ldrb	r3, [r7, #19]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10b      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d08:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d16:	4904      	ldr	r1, [pc, #16]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d1e:	e009      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	74bb      	strb	r3, [r7, #18]
 8002d24:	e006      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d30:	7cfb      	ldrb	r3, [r7, #19]
 8002d32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d34:	7c7b      	ldrb	r3, [r7, #17]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d105      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3a:	4b8a      	ldr	r3, [pc, #552]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	4a89      	ldr	r2, [pc, #548]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d52:	4b84      	ldr	r3, [pc, #528]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	f023 0203 	bic.w	r2, r3, #3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4980      	ldr	r1, [pc, #512]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d74:	4b7b      	ldr	r3, [pc, #492]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	f023 020c 	bic.w	r2, r3, #12
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	4978      	ldr	r1, [pc, #480]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d96:	4b73      	ldr	r3, [pc, #460]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	496f      	ldr	r1, [pc, #444]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002db8:	4b6a      	ldr	r3, [pc, #424]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc6:	4967      	ldr	r1, [pc, #412]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dda:	4b62      	ldr	r3, [pc, #392]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	495e      	ldr	r1, [pc, #376]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dfc:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	4956      	ldr	r1, [pc, #344]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e1e:	4b51      	ldr	r3, [pc, #324]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	494d      	ldr	r1, [pc, #308]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d028      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e40:	4b48      	ldr	r3, [pc, #288]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	4945      	ldr	r1, [pc, #276]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e60:	4b40      	ldr	r3, [pc, #256]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4a3f      	ldr	r2, [pc, #252]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e6a:	60d3      	str	r3, [r2, #12]
 8002e6c:	e011      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e76:	d10c      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 f882 	bl	8002f88 <RCCEx_PLLSAI1_Config>
 8002e84:	4603      	mov	r3, r0
 8002e86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e88:	7cfb      	ldrb	r3, [r7, #19]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002e8e:	7cfb      	ldrb	r3, [r7, #19]
 8002e90:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d028      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e9e:	4b31      	ldr	r3, [pc, #196]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	492d      	ldr	r1, [pc, #180]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ebc:	d106      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ebe:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	4a28      	ldr	r2, [pc, #160]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ec8:	60d3      	str	r3, [r2, #12]
 8002eca:	e011      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	2101      	movs	r1, #1
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 f853 	bl	8002f88 <RCCEx_PLLSAI1_Config>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ee6:	7cfb      	ldrb	r3, [r7, #19]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002eec:	7cfb      	ldrb	r3, [r7, #19]
 8002eee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d01c      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f0a:	4916      	ldr	r1, [pc, #88]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f1a:	d10c      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	2102      	movs	r1, #2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f830 	bl	8002f88 <RCCEx_PLLSAI1_Config>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002f32:	7cfb      	ldrb	r3, [r7, #19]
 8002f34:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f48:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f50:	4904      	ldr	r1, [pc, #16]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f58:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000

08002f68 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f72:	f043 0304 	orr.w	r3, r3, #4
 8002f76:	6013      	str	r3, [r2, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000

08002f88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f96:	4b74      	ldr	r3, [pc, #464]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d018      	beq.n	8002fd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fa2:	4b71      	ldr	r3, [pc, #452]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0203 	and.w	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d10d      	bne.n	8002fce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d009      	beq.n	8002fce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fba:	4b6b      	ldr	r3, [pc, #428]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
       ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d047      	beq.n	800305e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	e044      	b.n	800305e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d018      	beq.n	800300e <RCCEx_PLLSAI1_Config+0x86>
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d825      	bhi.n	800302c <RCCEx_PLLSAI1_Config+0xa4>
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d002      	beq.n	8002fea <RCCEx_PLLSAI1_Config+0x62>
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d009      	beq.n	8002ffc <RCCEx_PLLSAI1_Config+0x74>
 8002fe8:	e020      	b.n	800302c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fea:	4b5f      	ldr	r3, [pc, #380]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11d      	bne.n	8003032 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ffa:	e01a      	b.n	8003032 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ffc:	4b5a      	ldr	r3, [pc, #360]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003004:	2b00      	cmp	r3, #0
 8003006:	d116      	bne.n	8003036 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800300c:	e013      	b.n	8003036 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800300e:	4b56      	ldr	r3, [pc, #344]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10f      	bne.n	800303a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800301a:	4b53      	ldr	r3, [pc, #332]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800302a:	e006      	b.n	800303a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
      break;
 8003030:	e004      	b.n	800303c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003032:	bf00      	nop
 8003034:	e002      	b.n	800303c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800303a:	bf00      	nop
    }

    if(status == HAL_OK)
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10d      	bne.n	800305e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003042:	4b49      	ldr	r3, [pc, #292]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6819      	ldr	r1, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	430b      	orrs	r3, r1
 8003058:	4943      	ldr	r1, [pc, #268]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 800305a:	4313      	orrs	r3, r2
 800305c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d17c      	bne.n	800315e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003064:	4b40      	ldr	r3, [pc, #256]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a3f      	ldr	r2, [pc, #252]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 800306a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800306e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003070:	f7fe fbca 	bl	8001808 <HAL_GetTick>
 8003074:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003076:	e009      	b.n	800308c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003078:	f7fe fbc6 	bl	8001808 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d902      	bls.n	800308c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	73fb      	strb	r3, [r7, #15]
        break;
 800308a:	e005      	b.n	8003098 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800308c:	4b36      	ldr	r3, [pc, #216]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ef      	bne.n	8003078 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d15f      	bne.n	800315e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d110      	bne.n	80030c6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030a4:	4b30      	ldr	r3, [pc, #192]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80030ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6892      	ldr	r2, [r2, #8]
 80030b4:	0211      	lsls	r1, r2, #8
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68d2      	ldr	r2, [r2, #12]
 80030ba:	06d2      	lsls	r2, r2, #27
 80030bc:	430a      	orrs	r2, r1
 80030be:	492a      	ldr	r1, [pc, #168]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	610b      	str	r3, [r1, #16]
 80030c4:	e027      	b.n	8003116 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d112      	bne.n	80030f2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030cc:	4b26      	ldr	r3, [pc, #152]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6892      	ldr	r2, [r2, #8]
 80030dc:	0211      	lsls	r1, r2, #8
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6912      	ldr	r2, [r2, #16]
 80030e2:	0852      	lsrs	r2, r2, #1
 80030e4:	3a01      	subs	r2, #1
 80030e6:	0552      	lsls	r2, r2, #21
 80030e8:	430a      	orrs	r2, r1
 80030ea:	491f      	ldr	r1, [pc, #124]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	610b      	str	r3, [r1, #16]
 80030f0:	e011      	b.n	8003116 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6892      	ldr	r2, [r2, #8]
 8003102:	0211      	lsls	r1, r2, #8
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6952      	ldr	r2, [r2, #20]
 8003108:	0852      	lsrs	r2, r2, #1
 800310a:	3a01      	subs	r2, #1
 800310c:	0652      	lsls	r2, r2, #25
 800310e:	430a      	orrs	r2, r1
 8003110:	4915      	ldr	r1, [pc, #84]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003112:	4313      	orrs	r3, r2
 8003114:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003116:	4b14      	ldr	r3, [pc, #80]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a13      	ldr	r2, [pc, #76]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 800311c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003120:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003122:	f7fe fb71 	bl	8001808 <HAL_GetTick>
 8003126:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003128:	e009      	b.n	800313e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800312a:	f7fe fb6d 	bl	8001808 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d902      	bls.n	800313e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	73fb      	strb	r3, [r7, #15]
          break;
 800313c:	e005      	b.n	800314a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ef      	beq.n	800312a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d106      	bne.n	800315e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	4903      	ldr	r1, [pc, #12]	; (8003168 <RCCEx_PLLSAI1_Config+0x1e0>)
 800315a:	4313      	orrs	r3, r2
 800315c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800315e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40021000 	.word	0x40021000

0800316c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e049      	b.n	8003212 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fe f8d0 	bl	8001338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3304      	adds	r3, #4
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f000 fca4 	bl	8003af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e049      	b.n	80032c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d106      	bne.n	8003246 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f841 	bl	80032c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3304      	adds	r3, #4
 8003256:	4619      	mov	r1, r3
 8003258:	4610      	mov	r0, r2
 800325a:	f000 fc4d 	bl	8003af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <HAL_TIM_PWM_Start+0x24>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	e03c      	b.n	800337a <HAL_TIM_PWM_Start+0x9e>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2b04      	cmp	r3, #4
 8003304:	d109      	bne.n	800331a <HAL_TIM_PWM_Start+0x3e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b01      	cmp	r3, #1
 8003310:	bf14      	ite	ne
 8003312:	2301      	movne	r3, #1
 8003314:	2300      	moveq	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	e02f      	b.n	800337a <HAL_TIM_PWM_Start+0x9e>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b08      	cmp	r3, #8
 800331e:	d109      	bne.n	8003334 <HAL_TIM_PWM_Start+0x58>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b01      	cmp	r3, #1
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	e022      	b.n	800337a <HAL_TIM_PWM_Start+0x9e>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b0c      	cmp	r3, #12
 8003338:	d109      	bne.n	800334e <HAL_TIM_PWM_Start+0x72>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b01      	cmp	r3, #1
 8003344:	bf14      	ite	ne
 8003346:	2301      	movne	r3, #1
 8003348:	2300      	moveq	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	e015      	b.n	800337a <HAL_TIM_PWM_Start+0x9e>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b10      	cmp	r3, #16
 8003352:	d109      	bne.n	8003368 <HAL_TIM_PWM_Start+0x8c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	e008      	b.n	800337a <HAL_TIM_PWM_Start+0x9e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	bf14      	ite	ne
 8003374:	2301      	movne	r3, #1
 8003376:	2300      	moveq	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e07e      	b.n	8003480 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d104      	bne.n	8003392 <HAL_TIM_PWM_Start+0xb6>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003390:	e023      	b.n	80033da <HAL_TIM_PWM_Start+0xfe>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b04      	cmp	r3, #4
 8003396:	d104      	bne.n	80033a2 <HAL_TIM_PWM_Start+0xc6>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033a0:	e01b      	b.n	80033da <HAL_TIM_PWM_Start+0xfe>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d104      	bne.n	80033b2 <HAL_TIM_PWM_Start+0xd6>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b0:	e013      	b.n	80033da <HAL_TIM_PWM_Start+0xfe>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	d104      	bne.n	80033c2 <HAL_TIM_PWM_Start+0xe6>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033c0:	e00b      	b.n	80033da <HAL_TIM_PWM_Start+0xfe>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	d104      	bne.n	80033d2 <HAL_TIM_PWM_Start+0xf6>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2202      	movs	r2, #2
 80033cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033d0:	e003      	b.n	80033da <HAL_TIM_PWM_Start+0xfe>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2201      	movs	r2, #1
 80033e0:	6839      	ldr	r1, [r7, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 ff04 	bl	80041f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a26      	ldr	r2, [pc, #152]	; (8003488 <HAL_TIM_PWM_Start+0x1ac>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d009      	beq.n	8003406 <HAL_TIM_PWM_Start+0x12a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a25      	ldr	r2, [pc, #148]	; (800348c <HAL_TIM_PWM_Start+0x1b0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d004      	beq.n	8003406 <HAL_TIM_PWM_Start+0x12a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a23      	ldr	r2, [pc, #140]	; (8003490 <HAL_TIM_PWM_Start+0x1b4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d101      	bne.n	800340a <HAL_TIM_PWM_Start+0x12e>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <HAL_TIM_PWM_Start+0x130>
 800340a:	2300      	movs	r3, #0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d007      	beq.n	8003420 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800341e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a18      	ldr	r2, [pc, #96]	; (8003488 <HAL_TIM_PWM_Start+0x1ac>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d009      	beq.n	800343e <HAL_TIM_PWM_Start+0x162>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003432:	d004      	beq.n	800343e <HAL_TIM_PWM_Start+0x162>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a14      	ldr	r2, [pc, #80]	; (800348c <HAL_TIM_PWM_Start+0x1b0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d115      	bne.n	800346a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	4b13      	ldr	r3, [pc, #76]	; (8003494 <HAL_TIM_PWM_Start+0x1b8>)
 8003446:	4013      	ands	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b06      	cmp	r3, #6
 800344e:	d015      	beq.n	800347c <HAL_TIM_PWM_Start+0x1a0>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003456:	d011      	beq.n	800347c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003468:	e008      	b.n	800347c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f042 0201 	orr.w	r2, r2, #1
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	e000      	b.n	800347e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800347c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40014000 	.word	0x40014000
 8003490:	40014400 	.word	0x40014400
 8003494:	00010007 	.word	0x00010007

08003498 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d122      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d11b      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0202 	mvn.w	r2, #2
 80034c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 faed 	bl	8003aba <HAL_TIM_IC_CaptureCallback>
 80034e0:	e005      	b.n	80034ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fadf 	bl	8003aa6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 faf0 	bl	8003ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d122      	bne.n	8003548 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b04      	cmp	r3, #4
 800350e:	d11b      	bne.n	8003548 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0204 	mvn.w	r2, #4
 8003518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2202      	movs	r2, #2
 800351e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fac3 	bl	8003aba <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fab5 	bl	8003aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fac6 	bl	8003ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b08      	cmp	r3, #8
 8003554:	d122      	bne.n	800359c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b08      	cmp	r3, #8
 8003562:	d11b      	bne.n	800359c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0208 	mvn.w	r2, #8
 800356c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2204      	movs	r2, #4
 8003572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa99 	bl	8003aba <HAL_TIM_IC_CaptureCallback>
 8003588:	e005      	b.n	8003596 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fa8b 	bl	8003aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fa9c 	bl	8003ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d122      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d11b      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0210 	mvn.w	r2, #16
 80035c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2208      	movs	r2, #8
 80035c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fa6f 	bl	8003aba <HAL_TIM_IC_CaptureCallback>
 80035dc:	e005      	b.n	80035ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fa61 	bl	8003aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fa72 	bl	8003ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d10e      	bne.n	800361c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d107      	bne.n	800361c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0201 	mvn.w	r2, #1
 8003614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fa3b 	bl	8003a92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	2b80      	cmp	r3, #128	; 0x80
 8003628:	d10e      	bne.n	8003648 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003634:	2b80      	cmp	r3, #128	; 0x80
 8003636:	d107      	bne.n	8003648 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fe6a 	bl	800431c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003656:	d10e      	bne.n	8003676 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003662:	2b80      	cmp	r3, #128	; 0x80
 8003664:	d107      	bne.n	8003676 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800366e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fe5d 	bl	8004330 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003680:	2b40      	cmp	r3, #64	; 0x40
 8003682:	d10e      	bne.n	80036a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b40      	cmp	r3, #64	; 0x40
 8003690:	d107      	bne.n	80036a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800369a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fa20 	bl	8003ae2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d10e      	bne.n	80036ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d107      	bne.n	80036ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f06f 0220 	mvn.w	r2, #32
 80036c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fe1d 	bl	8004308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e0ff      	b.n	80038f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b14      	cmp	r3, #20
 8003702:	f200 80f0 	bhi.w	80038e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003706:	a201      	add	r2, pc, #4	; (adr r2, 800370c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370c:	08003761 	.word	0x08003761
 8003710:	080038e7 	.word	0x080038e7
 8003714:	080038e7 	.word	0x080038e7
 8003718:	080038e7 	.word	0x080038e7
 800371c:	080037a1 	.word	0x080037a1
 8003720:	080038e7 	.word	0x080038e7
 8003724:	080038e7 	.word	0x080038e7
 8003728:	080038e7 	.word	0x080038e7
 800372c:	080037e3 	.word	0x080037e3
 8003730:	080038e7 	.word	0x080038e7
 8003734:	080038e7 	.word	0x080038e7
 8003738:	080038e7 	.word	0x080038e7
 800373c:	08003823 	.word	0x08003823
 8003740:	080038e7 	.word	0x080038e7
 8003744:	080038e7 	.word	0x080038e7
 8003748:	080038e7 	.word	0x080038e7
 800374c:	08003865 	.word	0x08003865
 8003750:	080038e7 	.word	0x080038e7
 8003754:	080038e7 	.word	0x080038e7
 8003758:	080038e7 	.word	0x080038e7
 800375c:	080038a5 	.word	0x080038a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fa2a 	bl	8003bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0208 	orr.w	r2, r2, #8
 800377a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699a      	ldr	r2, [r3, #24]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0204 	bic.w	r2, r2, #4
 800378a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6999      	ldr	r1, [r3, #24]
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	619a      	str	r2, [r3, #24]
      break;
 800379e:	e0a5      	b.n	80038ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fa86 	bl	8003cb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6999      	ldr	r1, [r3, #24]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	021a      	lsls	r2, r3, #8
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	619a      	str	r2, [r3, #24]
      break;
 80037e0:	e084      	b.n	80038ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fadf 	bl	8003dac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0208 	orr.w	r2, r2, #8
 80037fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	69da      	ldr	r2, [r3, #28]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0204 	bic.w	r2, r2, #4
 800380c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69d9      	ldr	r1, [r3, #28]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	691a      	ldr	r2, [r3, #16]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	61da      	str	r2, [r3, #28]
      break;
 8003820:	e064      	b.n	80038ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68b9      	ldr	r1, [r7, #8]
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fb37 	bl	8003e9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69da      	ldr	r2, [r3, #28]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800383c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69da      	ldr	r2, [r3, #28]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69d9      	ldr	r1, [r3, #28]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	021a      	lsls	r2, r3, #8
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	61da      	str	r2, [r3, #28]
      break;
 8003862:	e043      	b.n	80038ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fb74 	bl	8003f58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0208 	orr.w	r2, r2, #8
 800387e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0204 	bic.w	r2, r2, #4
 800388e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038a2:	e023      	b.n	80038ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fbac 	bl	8004008 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	021a      	lsls	r2, r3, #8
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80038e4:	e002      	b.n	80038ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	75fb      	strb	r3, [r7, #23]
      break;
 80038ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop

08003900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_TIM_ConfigClockSource+0x1c>
 8003918:	2302      	movs	r3, #2
 800391a:	e0b6      	b.n	8003a8a <HAL_TIM_ConfigClockSource+0x18a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800393a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800393e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003946:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003958:	d03e      	beq.n	80039d8 <HAL_TIM_ConfigClockSource+0xd8>
 800395a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800395e:	f200 8087 	bhi.w	8003a70 <HAL_TIM_ConfigClockSource+0x170>
 8003962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003966:	f000 8086 	beq.w	8003a76 <HAL_TIM_ConfigClockSource+0x176>
 800396a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396e:	d87f      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x170>
 8003970:	2b70      	cmp	r3, #112	; 0x70
 8003972:	d01a      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0xaa>
 8003974:	2b70      	cmp	r3, #112	; 0x70
 8003976:	d87b      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x170>
 8003978:	2b60      	cmp	r3, #96	; 0x60
 800397a:	d050      	beq.n	8003a1e <HAL_TIM_ConfigClockSource+0x11e>
 800397c:	2b60      	cmp	r3, #96	; 0x60
 800397e:	d877      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x170>
 8003980:	2b50      	cmp	r3, #80	; 0x50
 8003982:	d03c      	beq.n	80039fe <HAL_TIM_ConfigClockSource+0xfe>
 8003984:	2b50      	cmp	r3, #80	; 0x50
 8003986:	d873      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x170>
 8003988:	2b40      	cmp	r3, #64	; 0x40
 800398a:	d058      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x13e>
 800398c:	2b40      	cmp	r3, #64	; 0x40
 800398e:	d86f      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x170>
 8003990:	2b30      	cmp	r3, #48	; 0x30
 8003992:	d064      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x15e>
 8003994:	2b30      	cmp	r3, #48	; 0x30
 8003996:	d86b      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x170>
 8003998:	2b20      	cmp	r3, #32
 800399a:	d060      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x15e>
 800399c:	2b20      	cmp	r3, #32
 800399e:	d867      	bhi.n	8003a70 <HAL_TIM_ConfigClockSource+0x170>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d05c      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x15e>
 80039a4:	2b10      	cmp	r3, #16
 80039a6:	d05a      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x15e>
 80039a8:	e062      	b.n	8003a70 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6899      	ldr	r1, [r3, #8]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f000 fbf9 	bl	80041b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	609a      	str	r2, [r3, #8]
      break;
 80039d6:	e04f      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	6899      	ldr	r1, [r3, #8]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f000 fbe2 	bl	80041b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039fa:	609a      	str	r2, [r3, #8]
      break;
 80039fc:	e03c      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6859      	ldr	r1, [r3, #4]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	f000 fb56 	bl	80040bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2150      	movs	r1, #80	; 0x50
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fbaf 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003a1c:	e02c      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f000 fb75 	bl	800411a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2160      	movs	r1, #96	; 0x60
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fb9f 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003a3c:	e01c      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6859      	ldr	r1, [r3, #4]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f000 fb36 	bl	80040bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2140      	movs	r1, #64	; 0x40
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fb8f 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003a5c:	e00c      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4619      	mov	r1, r3
 8003a68:	4610      	mov	r0, r2
 8003a6a:	f000 fb86 	bl	800417a <TIM_ITRx_SetConfig>
      break;
 8003a6e:	e003      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
      break;
 8003a74:	e000      	b.n	8003a78 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a2a      	ldr	r2, [pc, #168]	; (8003bb4 <TIM_Base_SetConfig+0xbc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d003      	beq.n	8003b18 <TIM_Base_SetConfig+0x20>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b16:	d108      	bne.n	8003b2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a21      	ldr	r2, [pc, #132]	; (8003bb4 <TIM_Base_SetConfig+0xbc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00b      	beq.n	8003b4a <TIM_Base_SetConfig+0x52>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b38:	d007      	beq.n	8003b4a <TIM_Base_SetConfig+0x52>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a1e      	ldr	r2, [pc, #120]	; (8003bb8 <TIM_Base_SetConfig+0xc0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d003      	beq.n	8003b4a <TIM_Base_SetConfig+0x52>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a1d      	ldr	r2, [pc, #116]	; (8003bbc <TIM_Base_SetConfig+0xc4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d108      	bne.n	8003b5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a0c      	ldr	r2, [pc, #48]	; (8003bb4 <TIM_Base_SetConfig+0xbc>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d007      	beq.n	8003b98 <TIM_Base_SetConfig+0xa0>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a0b      	ldr	r2, [pc, #44]	; (8003bb8 <TIM_Base_SetConfig+0xc0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d003      	beq.n	8003b98 <TIM_Base_SetConfig+0xa0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a0a      	ldr	r2, [pc, #40]	; (8003bbc <TIM_Base_SetConfig+0xc4>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d103      	bne.n	8003ba0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	615a      	str	r2, [r3, #20]
}
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40014000 	.word	0x40014000
 8003bbc:	40014400 	.word	0x40014400

08003bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	f023 0201 	bic.w	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0303 	bic.w	r3, r3, #3
 8003bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f023 0302 	bic.w	r3, r3, #2
 8003c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a24      	ldr	r2, [pc, #144]	; (8003cac <TIM_OC1_SetConfig+0xec>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d007      	beq.n	8003c30 <TIM_OC1_SetConfig+0x70>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a23      	ldr	r2, [pc, #140]	; (8003cb0 <TIM_OC1_SetConfig+0xf0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_OC1_SetConfig+0x70>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a22      	ldr	r2, [pc, #136]	; (8003cb4 <TIM_OC1_SetConfig+0xf4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d10c      	bne.n	8003c4a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f023 0308 	bic.w	r3, r3, #8
 8003c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f023 0304 	bic.w	r3, r3, #4
 8003c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a17      	ldr	r2, [pc, #92]	; (8003cac <TIM_OC1_SetConfig+0xec>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d007      	beq.n	8003c62 <TIM_OC1_SetConfig+0xa2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a16      	ldr	r2, [pc, #88]	; (8003cb0 <TIM_OC1_SetConfig+0xf0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <TIM_OC1_SetConfig+0xa2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a15      	ldr	r2, [pc, #84]	; (8003cb4 <TIM_OC1_SetConfig+0xf4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d111      	bne.n	8003c86 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	621a      	str	r2, [r3, #32]
}
 8003ca0:	bf00      	nop
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	40012c00 	.word	0x40012c00
 8003cb0:	40014000 	.word	0x40014000
 8003cb4:	40014400 	.word	0x40014400

08003cb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	f023 0210 	bic.w	r2, r3, #16
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f023 0320 	bic.w	r3, r3, #32
 8003d06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a22      	ldr	r2, [pc, #136]	; (8003da0 <TIM_OC2_SetConfig+0xe8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d10d      	bne.n	8003d38 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a19      	ldr	r2, [pc, #100]	; (8003da0 <TIM_OC2_SetConfig+0xe8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d007      	beq.n	8003d50 <TIM_OC2_SetConfig+0x98>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a18      	ldr	r2, [pc, #96]	; (8003da4 <TIM_OC2_SetConfig+0xec>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_OC2_SetConfig+0x98>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a17      	ldr	r2, [pc, #92]	; (8003da8 <TIM_OC2_SetConfig+0xf0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d113      	bne.n	8003d78 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40012c00 	.word	0x40012c00
 8003da4:	40014000 	.word	0x40014000
 8003da8:	40014400 	.word	0x40014400

08003dac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0303 	bic.w	r3, r3, #3
 8003de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a21      	ldr	r2, [pc, #132]	; (8003e90 <TIM_OC3_SetConfig+0xe4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d10d      	bne.n	8003e2a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <TIM_OC3_SetConfig+0xe4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d007      	beq.n	8003e42 <TIM_OC3_SetConfig+0x96>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <TIM_OC3_SetConfig+0xe8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d003      	beq.n	8003e42 <TIM_OC3_SetConfig+0x96>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <TIM_OC3_SetConfig+0xec>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d113      	bne.n	8003e6a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	621a      	str	r2, [r3, #32]
}
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	40012c00 	.word	0x40012c00
 8003e94:	40014000 	.word	0x40014000
 8003e98:	40014400 	.word	0x40014400

08003e9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	021b      	lsls	r3, r3, #8
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	031b      	lsls	r3, r3, #12
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a14      	ldr	r2, [pc, #80]	; (8003f4c <TIM_OC4_SetConfig+0xb0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d007      	beq.n	8003f10 <TIM_OC4_SetConfig+0x74>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a13      	ldr	r2, [pc, #76]	; (8003f50 <TIM_OC4_SetConfig+0xb4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_OC4_SetConfig+0x74>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a12      	ldr	r2, [pc, #72]	; (8003f54 <TIM_OC4_SetConfig+0xb8>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d109      	bne.n	8003f24 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	019b      	lsls	r3, r3, #6
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	621a      	str	r2, [r3, #32]
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40012c00 	.word	0x40012c00
 8003f50:	40014000 	.word	0x40014000
 8003f54:	40014400 	.word	0x40014400

08003f58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a13      	ldr	r2, [pc, #76]	; (8003ffc <TIM_OC5_SetConfig+0xa4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d007      	beq.n	8003fc2 <TIM_OC5_SetConfig+0x6a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a12      	ldr	r2, [pc, #72]	; (8004000 <TIM_OC5_SetConfig+0xa8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_OC5_SetConfig+0x6a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a11      	ldr	r2, [pc, #68]	; (8004004 <TIM_OC5_SetConfig+0xac>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d109      	bne.n	8003fd6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	621a      	str	r2, [r3, #32]
}
 8003ff0:	bf00      	nop
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40012c00 	.word	0x40012c00
 8004000:	40014000 	.word	0x40014000
 8004004:	40014400 	.word	0x40014400

08004008 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800403a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	021b      	lsls	r3, r3, #8
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800404e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	051b      	lsls	r3, r3, #20
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a14      	ldr	r2, [pc, #80]	; (80040b0 <TIM_OC6_SetConfig+0xa8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d007      	beq.n	8004074 <TIM_OC6_SetConfig+0x6c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a13      	ldr	r2, [pc, #76]	; (80040b4 <TIM_OC6_SetConfig+0xac>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d003      	beq.n	8004074 <TIM_OC6_SetConfig+0x6c>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a12      	ldr	r2, [pc, #72]	; (80040b8 <TIM_OC6_SetConfig+0xb0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d109      	bne.n	8004088 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800407a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	029b      	lsls	r3, r3, #10
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	621a      	str	r2, [r3, #32]
}
 80040a2:	bf00      	nop
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40012c00 	.word	0x40012c00
 80040b4:	40014000 	.word	0x40014000
 80040b8:	40014400 	.word	0x40014400

080040bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f023 0201 	bic.w	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f023 030a 	bic.w	r3, r3, #10
 80040f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	621a      	str	r2, [r3, #32]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800411a:	b480      	push	{r7}
 800411c:	b087      	sub	sp, #28
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0210 	bic.w	r2, r3, #16
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004144:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	031b      	lsls	r3, r3, #12
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004156:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	f043 0307 	orr.w	r3, r3, #7
 800419c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	609a      	str	r2, [r3, #8]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	021a      	lsls	r2, r3, #8
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	609a      	str	r2, [r3, #8]
}
 80041e4:	bf00      	nop
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	2201      	movs	r2, #1
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a1a      	ldr	r2, [r3, #32]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	43db      	mvns	r3, r3
 8004212:	401a      	ands	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a1a      	ldr	r2, [r3, #32]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	fa01 f303 	lsl.w	r3, r1, r3
 8004228:	431a      	orrs	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	621a      	str	r2, [r3, #32]
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004250:	2302      	movs	r3, #2
 8004252:	e04f      	b.n	80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a21      	ldr	r2, [pc, #132]	; (8004300 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d108      	bne.n	8004290 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004284:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	4313      	orrs	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a14      	ldr	r2, [pc, #80]	; (8004300 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d009      	beq.n	80042c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042bc:	d004      	beq.n	80042c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a10      	ldr	r2, [pc, #64]	; (8004304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d10c      	bne.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	40012c00 	.word	0x40012c00
 8004304:	40014000 	.word	0x40014000

08004308 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e040      	b.n	80043d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fd f83e 	bl	80013e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2224      	movs	r2, #36	; 0x24
 8004370:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0201 	bic.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f82c 	bl	80043e0 <UART_SetConfig>
 8004388:	4603      	mov	r3, r0
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e022      	b.n	80043d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fa4c 	bl	8004838 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689a      	ldr	r2, [r3, #8]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fad3 	bl	800497c <UART_CheckIdleState>
 80043d6:	4603      	mov	r3, r0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e4:	b08a      	sub	sp, #40	; 0x28
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	431a      	orrs	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	431a      	orrs	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	4313      	orrs	r3, r2
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4bb4      	ldr	r3, [pc, #720]	; (80046e0 <UART_SetConfig+0x300>)
 8004410:	4013      	ands	r3, r2
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004418:	430b      	orrs	r3, r1
 800441a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4aa9      	ldr	r2, [pc, #676]	; (80046e4 <UART_SetConfig+0x304>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004448:	4313      	orrs	r3, r2
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445c:	430a      	orrs	r2, r1
 800445e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4aa0      	ldr	r2, [pc, #640]	; (80046e8 <UART_SetConfig+0x308>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d126      	bne.n	80044b8 <UART_SetConfig+0xd8>
 800446a:	4ba0      	ldr	r3, [pc, #640]	; (80046ec <UART_SetConfig+0x30c>)
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	2b03      	cmp	r3, #3
 8004476:	d81b      	bhi.n	80044b0 <UART_SetConfig+0xd0>
 8004478:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <UART_SetConfig+0xa0>)
 800447a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447e:	bf00      	nop
 8004480:	08004491 	.word	0x08004491
 8004484:	080044a1 	.word	0x080044a1
 8004488:	08004499 	.word	0x08004499
 800448c:	080044a9 	.word	0x080044a9
 8004490:	2301      	movs	r3, #1
 8004492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004496:	e080      	b.n	800459a <UART_SetConfig+0x1ba>
 8004498:	2302      	movs	r3, #2
 800449a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449e:	e07c      	b.n	800459a <UART_SetConfig+0x1ba>
 80044a0:	2304      	movs	r3, #4
 80044a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a6:	e078      	b.n	800459a <UART_SetConfig+0x1ba>
 80044a8:	2308      	movs	r3, #8
 80044aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ae:	e074      	b.n	800459a <UART_SetConfig+0x1ba>
 80044b0:	2310      	movs	r3, #16
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b6:	e070      	b.n	800459a <UART_SetConfig+0x1ba>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a8c      	ldr	r2, [pc, #560]	; (80046f0 <UART_SetConfig+0x310>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d138      	bne.n	8004534 <UART_SetConfig+0x154>
 80044c2:	4b8a      	ldr	r3, [pc, #552]	; (80046ec <UART_SetConfig+0x30c>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c8:	f003 030c 	and.w	r3, r3, #12
 80044cc:	2b0c      	cmp	r3, #12
 80044ce:	d82d      	bhi.n	800452c <UART_SetConfig+0x14c>
 80044d0:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <UART_SetConfig+0xf8>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	0800450d 	.word	0x0800450d
 80044dc:	0800452d 	.word	0x0800452d
 80044e0:	0800452d 	.word	0x0800452d
 80044e4:	0800452d 	.word	0x0800452d
 80044e8:	0800451d 	.word	0x0800451d
 80044ec:	0800452d 	.word	0x0800452d
 80044f0:	0800452d 	.word	0x0800452d
 80044f4:	0800452d 	.word	0x0800452d
 80044f8:	08004515 	.word	0x08004515
 80044fc:	0800452d 	.word	0x0800452d
 8004500:	0800452d 	.word	0x0800452d
 8004504:	0800452d 	.word	0x0800452d
 8004508:	08004525 	.word	0x08004525
 800450c:	2300      	movs	r3, #0
 800450e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004512:	e042      	b.n	800459a <UART_SetConfig+0x1ba>
 8004514:	2302      	movs	r3, #2
 8004516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451a:	e03e      	b.n	800459a <UART_SetConfig+0x1ba>
 800451c:	2304      	movs	r3, #4
 800451e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004522:	e03a      	b.n	800459a <UART_SetConfig+0x1ba>
 8004524:	2308      	movs	r3, #8
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452a:	e036      	b.n	800459a <UART_SetConfig+0x1ba>
 800452c:	2310      	movs	r3, #16
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004532:	e032      	b.n	800459a <UART_SetConfig+0x1ba>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a6a      	ldr	r2, [pc, #424]	; (80046e4 <UART_SetConfig+0x304>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d12a      	bne.n	8004594 <UART_SetConfig+0x1b4>
 800453e:	4b6b      	ldr	r3, [pc, #428]	; (80046ec <UART_SetConfig+0x30c>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004548:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800454c:	d01a      	beq.n	8004584 <UART_SetConfig+0x1a4>
 800454e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004552:	d81b      	bhi.n	800458c <UART_SetConfig+0x1ac>
 8004554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004558:	d00c      	beq.n	8004574 <UART_SetConfig+0x194>
 800455a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800455e:	d815      	bhi.n	800458c <UART_SetConfig+0x1ac>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <UART_SetConfig+0x18c>
 8004564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004568:	d008      	beq.n	800457c <UART_SetConfig+0x19c>
 800456a:	e00f      	b.n	800458c <UART_SetConfig+0x1ac>
 800456c:	2300      	movs	r3, #0
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004572:	e012      	b.n	800459a <UART_SetConfig+0x1ba>
 8004574:	2302      	movs	r3, #2
 8004576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457a:	e00e      	b.n	800459a <UART_SetConfig+0x1ba>
 800457c:	2304      	movs	r3, #4
 800457e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004582:	e00a      	b.n	800459a <UART_SetConfig+0x1ba>
 8004584:	2308      	movs	r3, #8
 8004586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458a:	e006      	b.n	800459a <UART_SetConfig+0x1ba>
 800458c:	2310      	movs	r3, #16
 800458e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004592:	e002      	b.n	800459a <UART_SetConfig+0x1ba>
 8004594:	2310      	movs	r3, #16
 8004596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a51      	ldr	r2, [pc, #324]	; (80046e4 <UART_SetConfig+0x304>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d17a      	bne.n	800469a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d824      	bhi.n	80045f6 <UART_SetConfig+0x216>
 80045ac:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <UART_SetConfig+0x1d4>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	080045d9 	.word	0x080045d9
 80045b8:	080045f7 	.word	0x080045f7
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	080045f7 	.word	0x080045f7
 80045c4:	080045e7 	.word	0x080045e7
 80045c8:	080045f7 	.word	0x080045f7
 80045cc:	080045f7 	.word	0x080045f7
 80045d0:	080045f7 	.word	0x080045f7
 80045d4:	080045ef 	.word	0x080045ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d8:	f7fe fa44 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 80045dc:	61f8      	str	r0, [r7, #28]
        break;
 80045de:	e010      	b.n	8004602 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e0:	4b44      	ldr	r3, [pc, #272]	; (80046f4 <UART_SetConfig+0x314>)
 80045e2:	61fb      	str	r3, [r7, #28]
        break;
 80045e4:	e00d      	b.n	8004602 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045e6:	f7fe f9a5 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80045ea:	61f8      	str	r0, [r7, #28]
        break;
 80045ec:	e009      	b.n	8004602 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f2:	61fb      	str	r3, [r7, #28]
        break;
 80045f4:	e005      	b.n	8004602 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004600:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8107 	beq.w	8004818 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	4413      	add	r3, r2
 8004614:	69fa      	ldr	r2, [r7, #28]
 8004616:	429a      	cmp	r2, r3
 8004618:	d305      	bcc.n	8004626 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	429a      	cmp	r2, r3
 8004624:	d903      	bls.n	800462e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800462c:	e0f4      	b.n	8004818 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	2200      	movs	r2, #0
 8004632:	461c      	mov	r4, r3
 8004634:	4615      	mov	r5, r2
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	022b      	lsls	r3, r5, #8
 8004640:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004644:	0222      	lsls	r2, r4, #8
 8004646:	68f9      	ldr	r1, [r7, #12]
 8004648:	6849      	ldr	r1, [r1, #4]
 800464a:	0849      	lsrs	r1, r1, #1
 800464c:	2000      	movs	r0, #0
 800464e:	4688      	mov	r8, r1
 8004650:	4681      	mov	r9, r0
 8004652:	eb12 0a08 	adds.w	sl, r2, r8
 8004656:	eb43 0b09 	adc.w	fp, r3, r9
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	603b      	str	r3, [r7, #0]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004668:	4650      	mov	r0, sl
 800466a:	4659      	mov	r1, fp
 800466c:	f7fc f96e 	bl	800094c <__aeabi_uldivmod>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4613      	mov	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800467e:	d308      	bcc.n	8004692 <UART_SetConfig+0x2b2>
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004686:	d204      	bcs.n	8004692 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	60da      	str	r2, [r3, #12]
 8004690:	e0c2      	b.n	8004818 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004698:	e0be      	b.n	8004818 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a2:	d16a      	bne.n	800477a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80046a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d834      	bhi.n	8004716 <UART_SetConfig+0x336>
 80046ac:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <UART_SetConfig+0x2d4>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046d9 	.word	0x080046d9
 80046b8:	080046f9 	.word	0x080046f9
 80046bc:	08004701 	.word	0x08004701
 80046c0:	08004717 	.word	0x08004717
 80046c4:	08004707 	.word	0x08004707
 80046c8:	08004717 	.word	0x08004717
 80046cc:	08004717 	.word	0x08004717
 80046d0:	08004717 	.word	0x08004717
 80046d4:	0800470f 	.word	0x0800470f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046d8:	f7fe f9c4 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 80046dc:	61f8      	str	r0, [r7, #28]
        break;
 80046de:	e020      	b.n	8004722 <UART_SetConfig+0x342>
 80046e0:	efff69f3 	.word	0xefff69f3
 80046e4:	40008000 	.word	0x40008000
 80046e8:	40013800 	.word	0x40013800
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40004400 	.word	0x40004400
 80046f4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046f8:	f7fe f9ca 	bl	8002a90 <HAL_RCC_GetPCLK2Freq>
 80046fc:	61f8      	str	r0, [r7, #28]
        break;
 80046fe:	e010      	b.n	8004722 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004700:	4b4c      	ldr	r3, [pc, #304]	; (8004834 <UART_SetConfig+0x454>)
 8004702:	61fb      	str	r3, [r7, #28]
        break;
 8004704:	e00d      	b.n	8004722 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004706:	f7fe f915 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 800470a:	61f8      	str	r0, [r7, #28]
        break;
 800470c:	e009      	b.n	8004722 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800470e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004712:	61fb      	str	r3, [r7, #28]
        break;
 8004714:	e005      	b.n	8004722 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004720:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d077      	beq.n	8004818 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	005a      	lsls	r2, r3, #1
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	441a      	add	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	2b0f      	cmp	r3, #15
 8004742:	d916      	bls.n	8004772 <UART_SetConfig+0x392>
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474a:	d212      	bcs.n	8004772 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	b29b      	uxth	r3, r3
 8004750:	f023 030f 	bic.w	r3, r3, #15
 8004754:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	b29b      	uxth	r3, r3
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	b29a      	uxth	r2, r3
 8004762:	8afb      	ldrh	r3, [r7, #22]
 8004764:	4313      	orrs	r3, r2
 8004766:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	8afa      	ldrh	r2, [r7, #22]
 800476e:	60da      	str	r2, [r3, #12]
 8004770:	e052      	b.n	8004818 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004778:	e04e      	b.n	8004818 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800477a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800477e:	2b08      	cmp	r3, #8
 8004780:	d827      	bhi.n	80047d2 <UART_SetConfig+0x3f2>
 8004782:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <UART_SetConfig+0x3a8>)
 8004784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004788:	080047ad 	.word	0x080047ad
 800478c:	080047b5 	.word	0x080047b5
 8004790:	080047bd 	.word	0x080047bd
 8004794:	080047d3 	.word	0x080047d3
 8004798:	080047c3 	.word	0x080047c3
 800479c:	080047d3 	.word	0x080047d3
 80047a0:	080047d3 	.word	0x080047d3
 80047a4:	080047d3 	.word	0x080047d3
 80047a8:	080047cb 	.word	0x080047cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047ac:	f7fe f95a 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 80047b0:	61f8      	str	r0, [r7, #28]
        break;
 80047b2:	e014      	b.n	80047de <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047b4:	f7fe f96c 	bl	8002a90 <HAL_RCC_GetPCLK2Freq>
 80047b8:	61f8      	str	r0, [r7, #28]
        break;
 80047ba:	e010      	b.n	80047de <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047bc:	4b1d      	ldr	r3, [pc, #116]	; (8004834 <UART_SetConfig+0x454>)
 80047be:	61fb      	str	r3, [r7, #28]
        break;
 80047c0:	e00d      	b.n	80047de <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047c2:	f7fe f8b7 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80047c6:	61f8      	str	r0, [r7, #28]
        break;
 80047c8:	e009      	b.n	80047de <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ce:	61fb      	str	r3, [r7, #28]
        break;
 80047d0:	e005      	b.n	80047de <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047dc:	bf00      	nop
    }

    if (pclk != 0U)
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d019      	beq.n	8004818 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	085a      	lsrs	r2, r3, #1
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	441a      	add	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	2b0f      	cmp	r3, #15
 80047fc:	d909      	bls.n	8004812 <UART_SetConfig+0x432>
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004804:	d205      	bcs.n	8004812 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60da      	str	r2, [r3, #12]
 8004810:	e002      	b.n	8004818 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004824:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004828:	4618      	mov	r0, r3
 800482a:	3728      	adds	r7, #40	; 0x28
 800482c:	46bd      	mov	sp, r7
 800482e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004832:	bf00      	nop
 8004834:	00f42400 	.word	0x00f42400

08004838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01a      	beq.n	800494e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004936:	d10a      	bne.n	800494e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  }
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af02      	add	r7, sp, #8
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800498c:	f7fc ff3c 	bl	8001808 <HAL_GetTick>
 8004990:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b08      	cmp	r3, #8
 800499e:	d10e      	bne.n	80049be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f82d 	bl	8004a0e <UART_WaitOnFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e023      	b.n	8004a06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d10e      	bne.n	80049ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f817 	bl	8004a0e <UART_WaitOnFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e00d      	b.n	8004a06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b09c      	sub	sp, #112	; 0x70
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1e:	e0a5      	b.n	8004b6c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a26:	f000 80a1 	beq.w	8004b6c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a2a:	f7fc feed 	bl	8001808 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d302      	bcc.n	8004a40 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d13e      	bne.n	8004abe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a54:	667b      	str	r3, [r7, #100]	; 0x64
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a66:	e841 2300 	strex	r3, r2, [r1]
 8004a6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e6      	bne.n	8004a40 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3308      	adds	r3, #8
 8004a78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a84:	f023 0301 	bic.w	r3, r3, #1
 8004a88:	663b      	str	r3, [r7, #96]	; 0x60
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3308      	adds	r3, #8
 8004a90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a92:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e5      	bne.n	8004a72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e067      	b.n	8004b8e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d04f      	beq.n	8004b6c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ada:	d147      	bne.n	8004b6c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ae4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004afa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b04:	637b      	str	r3, [r7, #52]	; 0x34
 8004b06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e6      	bne.n	8004ae6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	613b      	str	r3, [r7, #16]
   return(result);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f023 0301 	bic.w	r3, r3, #1
 8004b2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3308      	adds	r3, #8
 8004b36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b38:	623a      	str	r2, [r7, #32]
 8004b3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	69f9      	ldr	r1, [r7, #28]
 8004b3e:	6a3a      	ldr	r2, [r7, #32]
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e5      	bne.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2220      	movs	r2, #32
 8004b56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e010      	b.n	8004b8e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69da      	ldr	r2, [r3, #28]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	4013      	ands	r3, r2
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	bf0c      	ite	eq
 8004b7c:	2301      	moveq	r3, #1
 8004b7e:	2300      	movne	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	f43f af4a 	beq.w	8004a20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3770      	adds	r7, #112	; 0x70
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <__errno>:
 8004b98:	4b01      	ldr	r3, [pc, #4]	; (8004ba0 <__errno+0x8>)
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	20000010 	.word	0x20000010

08004ba4 <__libc_init_array>:
 8004ba4:	b570      	push	{r4, r5, r6, lr}
 8004ba6:	4d0d      	ldr	r5, [pc, #52]	; (8004bdc <__libc_init_array+0x38>)
 8004ba8:	4c0d      	ldr	r4, [pc, #52]	; (8004be0 <__libc_init_array+0x3c>)
 8004baa:	1b64      	subs	r4, r4, r5
 8004bac:	10a4      	asrs	r4, r4, #2
 8004bae:	2600      	movs	r6, #0
 8004bb0:	42a6      	cmp	r6, r4
 8004bb2:	d109      	bne.n	8004bc8 <__libc_init_array+0x24>
 8004bb4:	4d0b      	ldr	r5, [pc, #44]	; (8004be4 <__libc_init_array+0x40>)
 8004bb6:	4c0c      	ldr	r4, [pc, #48]	; (8004be8 <__libc_init_array+0x44>)
 8004bb8:	f001 f8ba 	bl	8005d30 <_init>
 8004bbc:	1b64      	subs	r4, r4, r5
 8004bbe:	10a4      	asrs	r4, r4, #2
 8004bc0:	2600      	movs	r6, #0
 8004bc2:	42a6      	cmp	r6, r4
 8004bc4:	d105      	bne.n	8004bd2 <__libc_init_array+0x2e>
 8004bc6:	bd70      	pop	{r4, r5, r6, pc}
 8004bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bcc:	4798      	blx	r3
 8004bce:	3601      	adds	r6, #1
 8004bd0:	e7ee      	b.n	8004bb0 <__libc_init_array+0xc>
 8004bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd6:	4798      	blx	r3
 8004bd8:	3601      	adds	r6, #1
 8004bda:	e7f2      	b.n	8004bc2 <__libc_init_array+0x1e>
 8004bdc:	08005ee0 	.word	0x08005ee0
 8004be0:	08005ee0 	.word	0x08005ee0
 8004be4:	08005ee0 	.word	0x08005ee0
 8004be8:	08005ee4 	.word	0x08005ee4

08004bec <memset>:
 8004bec:	4402      	add	r2, r0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d100      	bne.n	8004bf6 <memset+0xa>
 8004bf4:	4770      	bx	lr
 8004bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bfa:	e7f9      	b.n	8004bf0 <memset+0x4>

08004bfc <srand>:
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4b10      	ldr	r3, [pc, #64]	; (8004c40 <srand+0x44>)
 8004c00:	681d      	ldr	r5, [r3, #0]
 8004c02:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004c04:	4604      	mov	r4, r0
 8004c06:	b9b3      	cbnz	r3, 8004c36 <srand+0x3a>
 8004c08:	2018      	movs	r0, #24
 8004c0a:	f000 f8bf 	bl	8004d8c <malloc>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	63a8      	str	r0, [r5, #56]	; 0x38
 8004c12:	b920      	cbnz	r0, 8004c1e <srand+0x22>
 8004c14:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <srand+0x48>)
 8004c16:	480c      	ldr	r0, [pc, #48]	; (8004c48 <srand+0x4c>)
 8004c18:	2142      	movs	r1, #66	; 0x42
 8004c1a:	f000 f875 	bl	8004d08 <__assert_func>
 8004c1e:	490b      	ldr	r1, [pc, #44]	; (8004c4c <srand+0x50>)
 8004c20:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <srand+0x54>)
 8004c22:	e9c0 1300 	strd	r1, r3, [r0]
 8004c26:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <srand+0x58>)
 8004c28:	6083      	str	r3, [r0, #8]
 8004c2a:	230b      	movs	r3, #11
 8004c2c:	8183      	strh	r3, [r0, #12]
 8004c2e:	2100      	movs	r1, #0
 8004c30:	2001      	movs	r0, #1
 8004c32:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004c36:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004c38:	2200      	movs	r2, #0
 8004c3a:	611c      	str	r4, [r3, #16]
 8004c3c:	615a      	str	r2, [r3, #20]
 8004c3e:	bd38      	pop	{r3, r4, r5, pc}
 8004c40:	20000010 	.word	0x20000010
 8004c44:	08005d94 	.word	0x08005d94
 8004c48:	08005dab 	.word	0x08005dab
 8004c4c:	abcd330e 	.word	0xabcd330e
 8004c50:	e66d1234 	.word	0xe66d1234
 8004c54:	0005deec 	.word	0x0005deec

08004c58 <rand>:
 8004c58:	4b16      	ldr	r3, [pc, #88]	; (8004cb4 <rand+0x5c>)
 8004c5a:	b510      	push	{r4, lr}
 8004c5c:	681c      	ldr	r4, [r3, #0]
 8004c5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c60:	b9b3      	cbnz	r3, 8004c90 <rand+0x38>
 8004c62:	2018      	movs	r0, #24
 8004c64:	f000 f892 	bl	8004d8c <malloc>
 8004c68:	63a0      	str	r0, [r4, #56]	; 0x38
 8004c6a:	b928      	cbnz	r0, 8004c78 <rand+0x20>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <rand+0x60>)
 8004c70:	4812      	ldr	r0, [pc, #72]	; (8004cbc <rand+0x64>)
 8004c72:	214e      	movs	r1, #78	; 0x4e
 8004c74:	f000 f848 	bl	8004d08 <__assert_func>
 8004c78:	4a11      	ldr	r2, [pc, #68]	; (8004cc0 <rand+0x68>)
 8004c7a:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <rand+0x6c>)
 8004c7c:	e9c0 2300 	strd	r2, r3, [r0]
 8004c80:	4b11      	ldr	r3, [pc, #68]	; (8004cc8 <rand+0x70>)
 8004c82:	6083      	str	r3, [r0, #8]
 8004c84:	230b      	movs	r3, #11
 8004c86:	8183      	strh	r3, [r0, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004c90:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004c92:	4a0e      	ldr	r2, [pc, #56]	; (8004ccc <rand+0x74>)
 8004c94:	6920      	ldr	r0, [r4, #16]
 8004c96:	6963      	ldr	r3, [r4, #20]
 8004c98:	490d      	ldr	r1, [pc, #52]	; (8004cd0 <rand+0x78>)
 8004c9a:	4342      	muls	r2, r0
 8004c9c:	fb01 2203 	mla	r2, r1, r3, r2
 8004ca0:	fba0 0101 	umull	r0, r1, r0, r1
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	eb42 0001 	adc.w	r0, r2, r1
 8004caa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8004cae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004cb2:	bd10      	pop	{r4, pc}
 8004cb4:	20000010 	.word	0x20000010
 8004cb8:	08005d94 	.word	0x08005d94
 8004cbc:	08005dab 	.word	0x08005dab
 8004cc0:	abcd330e 	.word	0xabcd330e
 8004cc4:	e66d1234 	.word	0xe66d1234
 8004cc8:	0005deec 	.word	0x0005deec
 8004ccc:	5851f42d 	.word	0x5851f42d
 8004cd0:	4c957f2d 	.word	0x4c957f2d

08004cd4 <time>:
 8004cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <time+0x30>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	4669      	mov	r1, sp
 8004cdc:	4604      	mov	r4, r0
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	f000 f842 	bl	8004d68 <_gettimeofday_r>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	bfbe      	ittt	lt
 8004ce8:	f04f 32ff 	movlt.w	r2, #4294967295
 8004cec:	f04f 33ff 	movlt.w	r3, #4294967295
 8004cf0:	e9cd 2300 	strdlt	r2, r3, [sp]
 8004cf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cf8:	b10c      	cbz	r4, 8004cfe <time+0x2a>
 8004cfa:	e9c4 0100 	strd	r0, r1, [r4]
 8004cfe:	b004      	add	sp, #16
 8004d00:	bd10      	pop	{r4, pc}
 8004d02:	bf00      	nop
 8004d04:	20000010 	.word	0x20000010

08004d08 <__assert_func>:
 8004d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d0a:	4614      	mov	r4, r2
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <__assert_func+0x2c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4605      	mov	r5, r0
 8004d14:	68d8      	ldr	r0, [r3, #12]
 8004d16:	b14c      	cbz	r4, 8004d2c <__assert_func+0x24>
 8004d18:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <__assert_func+0x30>)
 8004d1a:	9100      	str	r1, [sp, #0]
 8004d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004d20:	4906      	ldr	r1, [pc, #24]	; (8004d3c <__assert_func+0x34>)
 8004d22:	462b      	mov	r3, r5
 8004d24:	f000 f80e 	bl	8004d44 <fiprintf>
 8004d28:	f000 fcd6 	bl	80056d8 <abort>
 8004d2c:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <__assert_func+0x38>)
 8004d2e:	461c      	mov	r4, r3
 8004d30:	e7f3      	b.n	8004d1a <__assert_func+0x12>
 8004d32:	bf00      	nop
 8004d34:	20000010 	.word	0x20000010
 8004d38:	08005e06 	.word	0x08005e06
 8004d3c:	08005e13 	.word	0x08005e13
 8004d40:	08005e41 	.word	0x08005e41

08004d44 <fiprintf>:
 8004d44:	b40e      	push	{r1, r2, r3}
 8004d46:	b503      	push	{r0, r1, lr}
 8004d48:	4601      	mov	r1, r0
 8004d4a:	ab03      	add	r3, sp, #12
 8004d4c:	4805      	ldr	r0, [pc, #20]	; (8004d64 <fiprintf+0x20>)
 8004d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d52:	6800      	ldr	r0, [r0, #0]
 8004d54:	9301      	str	r3, [sp, #4]
 8004d56:	f000 f92b 	bl	8004fb0 <_vfiprintf_r>
 8004d5a:	b002      	add	sp, #8
 8004d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d60:	b003      	add	sp, #12
 8004d62:	4770      	bx	lr
 8004d64:	20000010 	.word	0x20000010

08004d68 <_gettimeofday_r>:
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	4d07      	ldr	r5, [pc, #28]	; (8004d88 <_gettimeofday_r+0x20>)
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	4604      	mov	r4, r0
 8004d70:	4608      	mov	r0, r1
 8004d72:	4611      	mov	r1, r2
 8004d74:	602b      	str	r3, [r5, #0]
 8004d76:	f000 ffd3 	bl	8005d20 <_gettimeofday>
 8004d7a:	1c43      	adds	r3, r0, #1
 8004d7c:	d102      	bne.n	8004d84 <_gettimeofday_r+0x1c>
 8004d7e:	682b      	ldr	r3, [r5, #0]
 8004d80:	b103      	cbz	r3, 8004d84 <_gettimeofday_r+0x1c>
 8004d82:	6023      	str	r3, [r4, #0]
 8004d84:	bd38      	pop	{r3, r4, r5, pc}
 8004d86:	bf00      	nop
 8004d88:	20000170 	.word	0x20000170

08004d8c <malloc>:
 8004d8c:	4b02      	ldr	r3, [pc, #8]	; (8004d98 <malloc+0xc>)
 8004d8e:	4601      	mov	r1, r0
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	f000 b86f 	b.w	8004e74 <_malloc_r>
 8004d96:	bf00      	nop
 8004d98:	20000010 	.word	0x20000010

08004d9c <_free_r>:
 8004d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d9e:	2900      	cmp	r1, #0
 8004da0:	d044      	beq.n	8004e2c <_free_r+0x90>
 8004da2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da6:	9001      	str	r0, [sp, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f1a1 0404 	sub.w	r4, r1, #4
 8004dae:	bfb8      	it	lt
 8004db0:	18e4      	addlt	r4, r4, r3
 8004db2:	f000 feb9 	bl	8005b28 <__malloc_lock>
 8004db6:	4a1e      	ldr	r2, [pc, #120]	; (8004e30 <_free_r+0x94>)
 8004db8:	9801      	ldr	r0, [sp, #4]
 8004dba:	6813      	ldr	r3, [r2, #0]
 8004dbc:	b933      	cbnz	r3, 8004dcc <_free_r+0x30>
 8004dbe:	6063      	str	r3, [r4, #4]
 8004dc0:	6014      	str	r4, [r2, #0]
 8004dc2:	b003      	add	sp, #12
 8004dc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dc8:	f000 beb4 	b.w	8005b34 <__malloc_unlock>
 8004dcc:	42a3      	cmp	r3, r4
 8004dce:	d908      	bls.n	8004de2 <_free_r+0x46>
 8004dd0:	6825      	ldr	r5, [r4, #0]
 8004dd2:	1961      	adds	r1, r4, r5
 8004dd4:	428b      	cmp	r3, r1
 8004dd6:	bf01      	itttt	eq
 8004dd8:	6819      	ldreq	r1, [r3, #0]
 8004dda:	685b      	ldreq	r3, [r3, #4]
 8004ddc:	1949      	addeq	r1, r1, r5
 8004dde:	6021      	streq	r1, [r4, #0]
 8004de0:	e7ed      	b.n	8004dbe <_free_r+0x22>
 8004de2:	461a      	mov	r2, r3
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	b10b      	cbz	r3, 8004dec <_free_r+0x50>
 8004de8:	42a3      	cmp	r3, r4
 8004dea:	d9fa      	bls.n	8004de2 <_free_r+0x46>
 8004dec:	6811      	ldr	r1, [r2, #0]
 8004dee:	1855      	adds	r5, r2, r1
 8004df0:	42a5      	cmp	r5, r4
 8004df2:	d10b      	bne.n	8004e0c <_free_r+0x70>
 8004df4:	6824      	ldr	r4, [r4, #0]
 8004df6:	4421      	add	r1, r4
 8004df8:	1854      	adds	r4, r2, r1
 8004dfa:	42a3      	cmp	r3, r4
 8004dfc:	6011      	str	r1, [r2, #0]
 8004dfe:	d1e0      	bne.n	8004dc2 <_free_r+0x26>
 8004e00:	681c      	ldr	r4, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	6053      	str	r3, [r2, #4]
 8004e06:	4421      	add	r1, r4
 8004e08:	6011      	str	r1, [r2, #0]
 8004e0a:	e7da      	b.n	8004dc2 <_free_r+0x26>
 8004e0c:	d902      	bls.n	8004e14 <_free_r+0x78>
 8004e0e:	230c      	movs	r3, #12
 8004e10:	6003      	str	r3, [r0, #0]
 8004e12:	e7d6      	b.n	8004dc2 <_free_r+0x26>
 8004e14:	6825      	ldr	r5, [r4, #0]
 8004e16:	1961      	adds	r1, r4, r5
 8004e18:	428b      	cmp	r3, r1
 8004e1a:	bf04      	itt	eq
 8004e1c:	6819      	ldreq	r1, [r3, #0]
 8004e1e:	685b      	ldreq	r3, [r3, #4]
 8004e20:	6063      	str	r3, [r4, #4]
 8004e22:	bf04      	itt	eq
 8004e24:	1949      	addeq	r1, r1, r5
 8004e26:	6021      	streq	r1, [r4, #0]
 8004e28:	6054      	str	r4, [r2, #4]
 8004e2a:	e7ca      	b.n	8004dc2 <_free_r+0x26>
 8004e2c:	b003      	add	sp, #12
 8004e2e:	bd30      	pop	{r4, r5, pc}
 8004e30:	20000168 	.word	0x20000168

08004e34 <sbrk_aligned>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4e0e      	ldr	r6, [pc, #56]	; (8004e70 <sbrk_aligned+0x3c>)
 8004e38:	460c      	mov	r4, r1
 8004e3a:	6831      	ldr	r1, [r6, #0]
 8004e3c:	4605      	mov	r5, r0
 8004e3e:	b911      	cbnz	r1, 8004e46 <sbrk_aligned+0x12>
 8004e40:	f000 fb7a 	bl	8005538 <_sbrk_r>
 8004e44:	6030      	str	r0, [r6, #0]
 8004e46:	4621      	mov	r1, r4
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 fb75 	bl	8005538 <_sbrk_r>
 8004e4e:	1c43      	adds	r3, r0, #1
 8004e50:	d00a      	beq.n	8004e68 <sbrk_aligned+0x34>
 8004e52:	1cc4      	adds	r4, r0, #3
 8004e54:	f024 0403 	bic.w	r4, r4, #3
 8004e58:	42a0      	cmp	r0, r4
 8004e5a:	d007      	beq.n	8004e6c <sbrk_aligned+0x38>
 8004e5c:	1a21      	subs	r1, r4, r0
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f000 fb6a 	bl	8005538 <_sbrk_r>
 8004e64:	3001      	adds	r0, #1
 8004e66:	d101      	bne.n	8004e6c <sbrk_aligned+0x38>
 8004e68:	f04f 34ff 	mov.w	r4, #4294967295
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	bd70      	pop	{r4, r5, r6, pc}
 8004e70:	2000016c 	.word	0x2000016c

08004e74 <_malloc_r>:
 8004e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e78:	1ccd      	adds	r5, r1, #3
 8004e7a:	f025 0503 	bic.w	r5, r5, #3
 8004e7e:	3508      	adds	r5, #8
 8004e80:	2d0c      	cmp	r5, #12
 8004e82:	bf38      	it	cc
 8004e84:	250c      	movcc	r5, #12
 8004e86:	2d00      	cmp	r5, #0
 8004e88:	4607      	mov	r7, r0
 8004e8a:	db01      	blt.n	8004e90 <_malloc_r+0x1c>
 8004e8c:	42a9      	cmp	r1, r5
 8004e8e:	d905      	bls.n	8004e9c <_malloc_r+0x28>
 8004e90:	230c      	movs	r3, #12
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	2600      	movs	r6, #0
 8004e96:	4630      	mov	r0, r6
 8004e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e9c:	4e2e      	ldr	r6, [pc, #184]	; (8004f58 <_malloc_r+0xe4>)
 8004e9e:	f000 fe43 	bl	8005b28 <__malloc_lock>
 8004ea2:	6833      	ldr	r3, [r6, #0]
 8004ea4:	461c      	mov	r4, r3
 8004ea6:	bb34      	cbnz	r4, 8004ef6 <_malloc_r+0x82>
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	4638      	mov	r0, r7
 8004eac:	f7ff ffc2 	bl	8004e34 <sbrk_aligned>
 8004eb0:	1c43      	adds	r3, r0, #1
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	d14d      	bne.n	8004f52 <_malloc_r+0xde>
 8004eb6:	6834      	ldr	r4, [r6, #0]
 8004eb8:	4626      	mov	r6, r4
 8004eba:	2e00      	cmp	r6, #0
 8004ebc:	d140      	bne.n	8004f40 <_malloc_r+0xcc>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	4631      	mov	r1, r6
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	eb04 0803 	add.w	r8, r4, r3
 8004ec8:	f000 fb36 	bl	8005538 <_sbrk_r>
 8004ecc:	4580      	cmp	r8, r0
 8004ece:	d13a      	bne.n	8004f46 <_malloc_r+0xd2>
 8004ed0:	6821      	ldr	r1, [r4, #0]
 8004ed2:	3503      	adds	r5, #3
 8004ed4:	1a6d      	subs	r5, r5, r1
 8004ed6:	f025 0503 	bic.w	r5, r5, #3
 8004eda:	3508      	adds	r5, #8
 8004edc:	2d0c      	cmp	r5, #12
 8004ede:	bf38      	it	cc
 8004ee0:	250c      	movcc	r5, #12
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	f7ff ffa5 	bl	8004e34 <sbrk_aligned>
 8004eea:	3001      	adds	r0, #1
 8004eec:	d02b      	beq.n	8004f46 <_malloc_r+0xd2>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	442b      	add	r3, r5
 8004ef2:	6023      	str	r3, [r4, #0]
 8004ef4:	e00e      	b.n	8004f14 <_malloc_r+0xa0>
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	1b52      	subs	r2, r2, r5
 8004efa:	d41e      	bmi.n	8004f3a <_malloc_r+0xc6>
 8004efc:	2a0b      	cmp	r2, #11
 8004efe:	d916      	bls.n	8004f2e <_malloc_r+0xba>
 8004f00:	1961      	adds	r1, r4, r5
 8004f02:	42a3      	cmp	r3, r4
 8004f04:	6025      	str	r5, [r4, #0]
 8004f06:	bf18      	it	ne
 8004f08:	6059      	strne	r1, [r3, #4]
 8004f0a:	6863      	ldr	r3, [r4, #4]
 8004f0c:	bf08      	it	eq
 8004f0e:	6031      	streq	r1, [r6, #0]
 8004f10:	5162      	str	r2, [r4, r5]
 8004f12:	604b      	str	r3, [r1, #4]
 8004f14:	4638      	mov	r0, r7
 8004f16:	f104 060b 	add.w	r6, r4, #11
 8004f1a:	f000 fe0b 	bl	8005b34 <__malloc_unlock>
 8004f1e:	f026 0607 	bic.w	r6, r6, #7
 8004f22:	1d23      	adds	r3, r4, #4
 8004f24:	1af2      	subs	r2, r6, r3
 8004f26:	d0b6      	beq.n	8004e96 <_malloc_r+0x22>
 8004f28:	1b9b      	subs	r3, r3, r6
 8004f2a:	50a3      	str	r3, [r4, r2]
 8004f2c:	e7b3      	b.n	8004e96 <_malloc_r+0x22>
 8004f2e:	6862      	ldr	r2, [r4, #4]
 8004f30:	42a3      	cmp	r3, r4
 8004f32:	bf0c      	ite	eq
 8004f34:	6032      	streq	r2, [r6, #0]
 8004f36:	605a      	strne	r2, [r3, #4]
 8004f38:	e7ec      	b.n	8004f14 <_malloc_r+0xa0>
 8004f3a:	4623      	mov	r3, r4
 8004f3c:	6864      	ldr	r4, [r4, #4]
 8004f3e:	e7b2      	b.n	8004ea6 <_malloc_r+0x32>
 8004f40:	4634      	mov	r4, r6
 8004f42:	6876      	ldr	r6, [r6, #4]
 8004f44:	e7b9      	b.n	8004eba <_malloc_r+0x46>
 8004f46:	230c      	movs	r3, #12
 8004f48:	603b      	str	r3, [r7, #0]
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	f000 fdf2 	bl	8005b34 <__malloc_unlock>
 8004f50:	e7a1      	b.n	8004e96 <_malloc_r+0x22>
 8004f52:	6025      	str	r5, [r4, #0]
 8004f54:	e7de      	b.n	8004f14 <_malloc_r+0xa0>
 8004f56:	bf00      	nop
 8004f58:	20000168 	.word	0x20000168

08004f5c <__sfputc_r>:
 8004f5c:	6893      	ldr	r3, [r2, #8]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	b410      	push	{r4}
 8004f64:	6093      	str	r3, [r2, #8]
 8004f66:	da08      	bge.n	8004f7a <__sfputc_r+0x1e>
 8004f68:	6994      	ldr	r4, [r2, #24]
 8004f6a:	42a3      	cmp	r3, r4
 8004f6c:	db01      	blt.n	8004f72 <__sfputc_r+0x16>
 8004f6e:	290a      	cmp	r1, #10
 8004f70:	d103      	bne.n	8004f7a <__sfputc_r+0x1e>
 8004f72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f76:	f000 baef 	b.w	8005558 <__swbuf_r>
 8004f7a:	6813      	ldr	r3, [r2, #0]
 8004f7c:	1c58      	adds	r0, r3, #1
 8004f7e:	6010      	str	r0, [r2, #0]
 8004f80:	7019      	strb	r1, [r3, #0]
 8004f82:	4608      	mov	r0, r1
 8004f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <__sfputs_r>:
 8004f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8c:	4606      	mov	r6, r0
 8004f8e:	460f      	mov	r7, r1
 8004f90:	4614      	mov	r4, r2
 8004f92:	18d5      	adds	r5, r2, r3
 8004f94:	42ac      	cmp	r4, r5
 8004f96:	d101      	bne.n	8004f9c <__sfputs_r+0x12>
 8004f98:	2000      	movs	r0, #0
 8004f9a:	e007      	b.n	8004fac <__sfputs_r+0x22>
 8004f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa0:	463a      	mov	r2, r7
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f7ff ffda 	bl	8004f5c <__sfputc_r>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d1f3      	bne.n	8004f94 <__sfputs_r+0xa>
 8004fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fb0 <_vfiprintf_r>:
 8004fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb4:	460d      	mov	r5, r1
 8004fb6:	b09d      	sub	sp, #116	; 0x74
 8004fb8:	4614      	mov	r4, r2
 8004fba:	4698      	mov	r8, r3
 8004fbc:	4606      	mov	r6, r0
 8004fbe:	b118      	cbz	r0, 8004fc8 <_vfiprintf_r+0x18>
 8004fc0:	6983      	ldr	r3, [r0, #24]
 8004fc2:	b90b      	cbnz	r3, 8004fc8 <_vfiprintf_r+0x18>
 8004fc4:	f000 fcaa 	bl	800591c <__sinit>
 8004fc8:	4b89      	ldr	r3, [pc, #548]	; (80051f0 <_vfiprintf_r+0x240>)
 8004fca:	429d      	cmp	r5, r3
 8004fcc:	d11b      	bne.n	8005006 <_vfiprintf_r+0x56>
 8004fce:	6875      	ldr	r5, [r6, #4]
 8004fd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fd2:	07d9      	lsls	r1, r3, #31
 8004fd4:	d405      	bmi.n	8004fe2 <_vfiprintf_r+0x32>
 8004fd6:	89ab      	ldrh	r3, [r5, #12]
 8004fd8:	059a      	lsls	r2, r3, #22
 8004fda:	d402      	bmi.n	8004fe2 <_vfiprintf_r+0x32>
 8004fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fde:	f000 fd3b 	bl	8005a58 <__retarget_lock_acquire_recursive>
 8004fe2:	89ab      	ldrh	r3, [r5, #12]
 8004fe4:	071b      	lsls	r3, r3, #28
 8004fe6:	d501      	bpl.n	8004fec <_vfiprintf_r+0x3c>
 8004fe8:	692b      	ldr	r3, [r5, #16]
 8004fea:	b9eb      	cbnz	r3, 8005028 <_vfiprintf_r+0x78>
 8004fec:	4629      	mov	r1, r5
 8004fee:	4630      	mov	r0, r6
 8004ff0:	f000 fb04 	bl	80055fc <__swsetup_r>
 8004ff4:	b1c0      	cbz	r0, 8005028 <_vfiprintf_r+0x78>
 8004ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ff8:	07dc      	lsls	r4, r3, #31
 8004ffa:	d50e      	bpl.n	800501a <_vfiprintf_r+0x6a>
 8004ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8005000:	b01d      	add	sp, #116	; 0x74
 8005002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005006:	4b7b      	ldr	r3, [pc, #492]	; (80051f4 <_vfiprintf_r+0x244>)
 8005008:	429d      	cmp	r5, r3
 800500a:	d101      	bne.n	8005010 <_vfiprintf_r+0x60>
 800500c:	68b5      	ldr	r5, [r6, #8]
 800500e:	e7df      	b.n	8004fd0 <_vfiprintf_r+0x20>
 8005010:	4b79      	ldr	r3, [pc, #484]	; (80051f8 <_vfiprintf_r+0x248>)
 8005012:	429d      	cmp	r5, r3
 8005014:	bf08      	it	eq
 8005016:	68f5      	ldreq	r5, [r6, #12]
 8005018:	e7da      	b.n	8004fd0 <_vfiprintf_r+0x20>
 800501a:	89ab      	ldrh	r3, [r5, #12]
 800501c:	0598      	lsls	r0, r3, #22
 800501e:	d4ed      	bmi.n	8004ffc <_vfiprintf_r+0x4c>
 8005020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005022:	f000 fd1a 	bl	8005a5a <__retarget_lock_release_recursive>
 8005026:	e7e9      	b.n	8004ffc <_vfiprintf_r+0x4c>
 8005028:	2300      	movs	r3, #0
 800502a:	9309      	str	r3, [sp, #36]	; 0x24
 800502c:	2320      	movs	r3, #32
 800502e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005032:	f8cd 800c 	str.w	r8, [sp, #12]
 8005036:	2330      	movs	r3, #48	; 0x30
 8005038:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80051fc <_vfiprintf_r+0x24c>
 800503c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005040:	f04f 0901 	mov.w	r9, #1
 8005044:	4623      	mov	r3, r4
 8005046:	469a      	mov	sl, r3
 8005048:	f813 2b01 	ldrb.w	r2, [r3], #1
 800504c:	b10a      	cbz	r2, 8005052 <_vfiprintf_r+0xa2>
 800504e:	2a25      	cmp	r2, #37	; 0x25
 8005050:	d1f9      	bne.n	8005046 <_vfiprintf_r+0x96>
 8005052:	ebba 0b04 	subs.w	fp, sl, r4
 8005056:	d00b      	beq.n	8005070 <_vfiprintf_r+0xc0>
 8005058:	465b      	mov	r3, fp
 800505a:	4622      	mov	r2, r4
 800505c:	4629      	mov	r1, r5
 800505e:	4630      	mov	r0, r6
 8005060:	f7ff ff93 	bl	8004f8a <__sfputs_r>
 8005064:	3001      	adds	r0, #1
 8005066:	f000 80aa 	beq.w	80051be <_vfiprintf_r+0x20e>
 800506a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800506c:	445a      	add	r2, fp
 800506e:	9209      	str	r2, [sp, #36]	; 0x24
 8005070:	f89a 3000 	ldrb.w	r3, [sl]
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 80a2 	beq.w	80051be <_vfiprintf_r+0x20e>
 800507a:	2300      	movs	r3, #0
 800507c:	f04f 32ff 	mov.w	r2, #4294967295
 8005080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005084:	f10a 0a01 	add.w	sl, sl, #1
 8005088:	9304      	str	r3, [sp, #16]
 800508a:	9307      	str	r3, [sp, #28]
 800508c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005090:	931a      	str	r3, [sp, #104]	; 0x68
 8005092:	4654      	mov	r4, sl
 8005094:	2205      	movs	r2, #5
 8005096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800509a:	4858      	ldr	r0, [pc, #352]	; (80051fc <_vfiprintf_r+0x24c>)
 800509c:	f7fb f898 	bl	80001d0 <memchr>
 80050a0:	9a04      	ldr	r2, [sp, #16]
 80050a2:	b9d8      	cbnz	r0, 80050dc <_vfiprintf_r+0x12c>
 80050a4:	06d1      	lsls	r1, r2, #27
 80050a6:	bf44      	itt	mi
 80050a8:	2320      	movmi	r3, #32
 80050aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050ae:	0713      	lsls	r3, r2, #28
 80050b0:	bf44      	itt	mi
 80050b2:	232b      	movmi	r3, #43	; 0x2b
 80050b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050b8:	f89a 3000 	ldrb.w	r3, [sl]
 80050bc:	2b2a      	cmp	r3, #42	; 0x2a
 80050be:	d015      	beq.n	80050ec <_vfiprintf_r+0x13c>
 80050c0:	9a07      	ldr	r2, [sp, #28]
 80050c2:	4654      	mov	r4, sl
 80050c4:	2000      	movs	r0, #0
 80050c6:	f04f 0c0a 	mov.w	ip, #10
 80050ca:	4621      	mov	r1, r4
 80050cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050d0:	3b30      	subs	r3, #48	; 0x30
 80050d2:	2b09      	cmp	r3, #9
 80050d4:	d94e      	bls.n	8005174 <_vfiprintf_r+0x1c4>
 80050d6:	b1b0      	cbz	r0, 8005106 <_vfiprintf_r+0x156>
 80050d8:	9207      	str	r2, [sp, #28]
 80050da:	e014      	b.n	8005106 <_vfiprintf_r+0x156>
 80050dc:	eba0 0308 	sub.w	r3, r0, r8
 80050e0:	fa09 f303 	lsl.w	r3, r9, r3
 80050e4:	4313      	orrs	r3, r2
 80050e6:	9304      	str	r3, [sp, #16]
 80050e8:	46a2      	mov	sl, r4
 80050ea:	e7d2      	b.n	8005092 <_vfiprintf_r+0xe2>
 80050ec:	9b03      	ldr	r3, [sp, #12]
 80050ee:	1d19      	adds	r1, r3, #4
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	9103      	str	r1, [sp, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	bfbb      	ittet	lt
 80050f8:	425b      	neglt	r3, r3
 80050fa:	f042 0202 	orrlt.w	r2, r2, #2
 80050fe:	9307      	strge	r3, [sp, #28]
 8005100:	9307      	strlt	r3, [sp, #28]
 8005102:	bfb8      	it	lt
 8005104:	9204      	strlt	r2, [sp, #16]
 8005106:	7823      	ldrb	r3, [r4, #0]
 8005108:	2b2e      	cmp	r3, #46	; 0x2e
 800510a:	d10c      	bne.n	8005126 <_vfiprintf_r+0x176>
 800510c:	7863      	ldrb	r3, [r4, #1]
 800510e:	2b2a      	cmp	r3, #42	; 0x2a
 8005110:	d135      	bne.n	800517e <_vfiprintf_r+0x1ce>
 8005112:	9b03      	ldr	r3, [sp, #12]
 8005114:	1d1a      	adds	r2, r3, #4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	9203      	str	r2, [sp, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	bfb8      	it	lt
 800511e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005122:	3402      	adds	r4, #2
 8005124:	9305      	str	r3, [sp, #20]
 8005126:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800520c <_vfiprintf_r+0x25c>
 800512a:	7821      	ldrb	r1, [r4, #0]
 800512c:	2203      	movs	r2, #3
 800512e:	4650      	mov	r0, sl
 8005130:	f7fb f84e 	bl	80001d0 <memchr>
 8005134:	b140      	cbz	r0, 8005148 <_vfiprintf_r+0x198>
 8005136:	2340      	movs	r3, #64	; 0x40
 8005138:	eba0 000a 	sub.w	r0, r0, sl
 800513c:	fa03 f000 	lsl.w	r0, r3, r0
 8005140:	9b04      	ldr	r3, [sp, #16]
 8005142:	4303      	orrs	r3, r0
 8005144:	3401      	adds	r4, #1
 8005146:	9304      	str	r3, [sp, #16]
 8005148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800514c:	482c      	ldr	r0, [pc, #176]	; (8005200 <_vfiprintf_r+0x250>)
 800514e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005152:	2206      	movs	r2, #6
 8005154:	f7fb f83c 	bl	80001d0 <memchr>
 8005158:	2800      	cmp	r0, #0
 800515a:	d03f      	beq.n	80051dc <_vfiprintf_r+0x22c>
 800515c:	4b29      	ldr	r3, [pc, #164]	; (8005204 <_vfiprintf_r+0x254>)
 800515e:	bb1b      	cbnz	r3, 80051a8 <_vfiprintf_r+0x1f8>
 8005160:	9b03      	ldr	r3, [sp, #12]
 8005162:	3307      	adds	r3, #7
 8005164:	f023 0307 	bic.w	r3, r3, #7
 8005168:	3308      	adds	r3, #8
 800516a:	9303      	str	r3, [sp, #12]
 800516c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800516e:	443b      	add	r3, r7
 8005170:	9309      	str	r3, [sp, #36]	; 0x24
 8005172:	e767      	b.n	8005044 <_vfiprintf_r+0x94>
 8005174:	fb0c 3202 	mla	r2, ip, r2, r3
 8005178:	460c      	mov	r4, r1
 800517a:	2001      	movs	r0, #1
 800517c:	e7a5      	b.n	80050ca <_vfiprintf_r+0x11a>
 800517e:	2300      	movs	r3, #0
 8005180:	3401      	adds	r4, #1
 8005182:	9305      	str	r3, [sp, #20]
 8005184:	4619      	mov	r1, r3
 8005186:	f04f 0c0a 	mov.w	ip, #10
 800518a:	4620      	mov	r0, r4
 800518c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005190:	3a30      	subs	r2, #48	; 0x30
 8005192:	2a09      	cmp	r2, #9
 8005194:	d903      	bls.n	800519e <_vfiprintf_r+0x1ee>
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0c5      	beq.n	8005126 <_vfiprintf_r+0x176>
 800519a:	9105      	str	r1, [sp, #20]
 800519c:	e7c3      	b.n	8005126 <_vfiprintf_r+0x176>
 800519e:	fb0c 2101 	mla	r1, ip, r1, r2
 80051a2:	4604      	mov	r4, r0
 80051a4:	2301      	movs	r3, #1
 80051a6:	e7f0      	b.n	800518a <_vfiprintf_r+0x1da>
 80051a8:	ab03      	add	r3, sp, #12
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	462a      	mov	r2, r5
 80051ae:	4b16      	ldr	r3, [pc, #88]	; (8005208 <_vfiprintf_r+0x258>)
 80051b0:	a904      	add	r1, sp, #16
 80051b2:	4630      	mov	r0, r6
 80051b4:	f3af 8000 	nop.w
 80051b8:	4607      	mov	r7, r0
 80051ba:	1c78      	adds	r0, r7, #1
 80051bc:	d1d6      	bne.n	800516c <_vfiprintf_r+0x1bc>
 80051be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051c0:	07d9      	lsls	r1, r3, #31
 80051c2:	d405      	bmi.n	80051d0 <_vfiprintf_r+0x220>
 80051c4:	89ab      	ldrh	r3, [r5, #12]
 80051c6:	059a      	lsls	r2, r3, #22
 80051c8:	d402      	bmi.n	80051d0 <_vfiprintf_r+0x220>
 80051ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051cc:	f000 fc45 	bl	8005a5a <__retarget_lock_release_recursive>
 80051d0:	89ab      	ldrh	r3, [r5, #12]
 80051d2:	065b      	lsls	r3, r3, #25
 80051d4:	f53f af12 	bmi.w	8004ffc <_vfiprintf_r+0x4c>
 80051d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051da:	e711      	b.n	8005000 <_vfiprintf_r+0x50>
 80051dc:	ab03      	add	r3, sp, #12
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	462a      	mov	r2, r5
 80051e2:	4b09      	ldr	r3, [pc, #36]	; (8005208 <_vfiprintf_r+0x258>)
 80051e4:	a904      	add	r1, sp, #16
 80051e6:	4630      	mov	r0, r6
 80051e8:	f000 f880 	bl	80052ec <_printf_i>
 80051ec:	e7e4      	b.n	80051b8 <_vfiprintf_r+0x208>
 80051ee:	bf00      	nop
 80051f0:	08005e98 	.word	0x08005e98
 80051f4:	08005eb8 	.word	0x08005eb8
 80051f8:	08005e78 	.word	0x08005e78
 80051fc:	08005e42 	.word	0x08005e42
 8005200:	08005e4c 	.word	0x08005e4c
 8005204:	00000000 	.word	0x00000000
 8005208:	08004f8b 	.word	0x08004f8b
 800520c:	08005e48 	.word	0x08005e48

08005210 <_printf_common>:
 8005210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005214:	4616      	mov	r6, r2
 8005216:	4699      	mov	r9, r3
 8005218:	688a      	ldr	r2, [r1, #8]
 800521a:	690b      	ldr	r3, [r1, #16]
 800521c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005220:	4293      	cmp	r3, r2
 8005222:	bfb8      	it	lt
 8005224:	4613      	movlt	r3, r2
 8005226:	6033      	str	r3, [r6, #0]
 8005228:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800522c:	4607      	mov	r7, r0
 800522e:	460c      	mov	r4, r1
 8005230:	b10a      	cbz	r2, 8005236 <_printf_common+0x26>
 8005232:	3301      	adds	r3, #1
 8005234:	6033      	str	r3, [r6, #0]
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	0699      	lsls	r1, r3, #26
 800523a:	bf42      	ittt	mi
 800523c:	6833      	ldrmi	r3, [r6, #0]
 800523e:	3302      	addmi	r3, #2
 8005240:	6033      	strmi	r3, [r6, #0]
 8005242:	6825      	ldr	r5, [r4, #0]
 8005244:	f015 0506 	ands.w	r5, r5, #6
 8005248:	d106      	bne.n	8005258 <_printf_common+0x48>
 800524a:	f104 0a19 	add.w	sl, r4, #25
 800524e:	68e3      	ldr	r3, [r4, #12]
 8005250:	6832      	ldr	r2, [r6, #0]
 8005252:	1a9b      	subs	r3, r3, r2
 8005254:	42ab      	cmp	r3, r5
 8005256:	dc26      	bgt.n	80052a6 <_printf_common+0x96>
 8005258:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800525c:	1e13      	subs	r3, r2, #0
 800525e:	6822      	ldr	r2, [r4, #0]
 8005260:	bf18      	it	ne
 8005262:	2301      	movne	r3, #1
 8005264:	0692      	lsls	r2, r2, #26
 8005266:	d42b      	bmi.n	80052c0 <_printf_common+0xb0>
 8005268:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800526c:	4649      	mov	r1, r9
 800526e:	4638      	mov	r0, r7
 8005270:	47c0      	blx	r8
 8005272:	3001      	adds	r0, #1
 8005274:	d01e      	beq.n	80052b4 <_printf_common+0xa4>
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	68e5      	ldr	r5, [r4, #12]
 800527a:	6832      	ldr	r2, [r6, #0]
 800527c:	f003 0306 	and.w	r3, r3, #6
 8005280:	2b04      	cmp	r3, #4
 8005282:	bf08      	it	eq
 8005284:	1aad      	subeq	r5, r5, r2
 8005286:	68a3      	ldr	r3, [r4, #8]
 8005288:	6922      	ldr	r2, [r4, #16]
 800528a:	bf0c      	ite	eq
 800528c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005290:	2500      	movne	r5, #0
 8005292:	4293      	cmp	r3, r2
 8005294:	bfc4      	itt	gt
 8005296:	1a9b      	subgt	r3, r3, r2
 8005298:	18ed      	addgt	r5, r5, r3
 800529a:	2600      	movs	r6, #0
 800529c:	341a      	adds	r4, #26
 800529e:	42b5      	cmp	r5, r6
 80052a0:	d11a      	bne.n	80052d8 <_printf_common+0xc8>
 80052a2:	2000      	movs	r0, #0
 80052a4:	e008      	b.n	80052b8 <_printf_common+0xa8>
 80052a6:	2301      	movs	r3, #1
 80052a8:	4652      	mov	r2, sl
 80052aa:	4649      	mov	r1, r9
 80052ac:	4638      	mov	r0, r7
 80052ae:	47c0      	blx	r8
 80052b0:	3001      	adds	r0, #1
 80052b2:	d103      	bne.n	80052bc <_printf_common+0xac>
 80052b4:	f04f 30ff 	mov.w	r0, #4294967295
 80052b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052bc:	3501      	adds	r5, #1
 80052be:	e7c6      	b.n	800524e <_printf_common+0x3e>
 80052c0:	18e1      	adds	r1, r4, r3
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	2030      	movs	r0, #48	; 0x30
 80052c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052ca:	4422      	add	r2, r4
 80052cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052d4:	3302      	adds	r3, #2
 80052d6:	e7c7      	b.n	8005268 <_printf_common+0x58>
 80052d8:	2301      	movs	r3, #1
 80052da:	4622      	mov	r2, r4
 80052dc:	4649      	mov	r1, r9
 80052de:	4638      	mov	r0, r7
 80052e0:	47c0      	blx	r8
 80052e2:	3001      	adds	r0, #1
 80052e4:	d0e6      	beq.n	80052b4 <_printf_common+0xa4>
 80052e6:	3601      	adds	r6, #1
 80052e8:	e7d9      	b.n	800529e <_printf_common+0x8e>
	...

080052ec <_printf_i>:
 80052ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052f0:	7e0f      	ldrb	r7, [r1, #24]
 80052f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052f4:	2f78      	cmp	r7, #120	; 0x78
 80052f6:	4691      	mov	r9, r2
 80052f8:	4680      	mov	r8, r0
 80052fa:	460c      	mov	r4, r1
 80052fc:	469a      	mov	sl, r3
 80052fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005302:	d807      	bhi.n	8005314 <_printf_i+0x28>
 8005304:	2f62      	cmp	r7, #98	; 0x62
 8005306:	d80a      	bhi.n	800531e <_printf_i+0x32>
 8005308:	2f00      	cmp	r7, #0
 800530a:	f000 80d8 	beq.w	80054be <_printf_i+0x1d2>
 800530e:	2f58      	cmp	r7, #88	; 0x58
 8005310:	f000 80a3 	beq.w	800545a <_printf_i+0x16e>
 8005314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005318:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800531c:	e03a      	b.n	8005394 <_printf_i+0xa8>
 800531e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005322:	2b15      	cmp	r3, #21
 8005324:	d8f6      	bhi.n	8005314 <_printf_i+0x28>
 8005326:	a101      	add	r1, pc, #4	; (adr r1, 800532c <_printf_i+0x40>)
 8005328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800532c:	08005385 	.word	0x08005385
 8005330:	08005399 	.word	0x08005399
 8005334:	08005315 	.word	0x08005315
 8005338:	08005315 	.word	0x08005315
 800533c:	08005315 	.word	0x08005315
 8005340:	08005315 	.word	0x08005315
 8005344:	08005399 	.word	0x08005399
 8005348:	08005315 	.word	0x08005315
 800534c:	08005315 	.word	0x08005315
 8005350:	08005315 	.word	0x08005315
 8005354:	08005315 	.word	0x08005315
 8005358:	080054a5 	.word	0x080054a5
 800535c:	080053c9 	.word	0x080053c9
 8005360:	08005487 	.word	0x08005487
 8005364:	08005315 	.word	0x08005315
 8005368:	08005315 	.word	0x08005315
 800536c:	080054c7 	.word	0x080054c7
 8005370:	08005315 	.word	0x08005315
 8005374:	080053c9 	.word	0x080053c9
 8005378:	08005315 	.word	0x08005315
 800537c:	08005315 	.word	0x08005315
 8005380:	0800548f 	.word	0x0800548f
 8005384:	682b      	ldr	r3, [r5, #0]
 8005386:	1d1a      	adds	r2, r3, #4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	602a      	str	r2, [r5, #0]
 800538c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005394:	2301      	movs	r3, #1
 8005396:	e0a3      	b.n	80054e0 <_printf_i+0x1f4>
 8005398:	6820      	ldr	r0, [r4, #0]
 800539a:	6829      	ldr	r1, [r5, #0]
 800539c:	0606      	lsls	r6, r0, #24
 800539e:	f101 0304 	add.w	r3, r1, #4
 80053a2:	d50a      	bpl.n	80053ba <_printf_i+0xce>
 80053a4:	680e      	ldr	r6, [r1, #0]
 80053a6:	602b      	str	r3, [r5, #0]
 80053a8:	2e00      	cmp	r6, #0
 80053aa:	da03      	bge.n	80053b4 <_printf_i+0xc8>
 80053ac:	232d      	movs	r3, #45	; 0x2d
 80053ae:	4276      	negs	r6, r6
 80053b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053b4:	485e      	ldr	r0, [pc, #376]	; (8005530 <_printf_i+0x244>)
 80053b6:	230a      	movs	r3, #10
 80053b8:	e019      	b.n	80053ee <_printf_i+0x102>
 80053ba:	680e      	ldr	r6, [r1, #0]
 80053bc:	602b      	str	r3, [r5, #0]
 80053be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053c2:	bf18      	it	ne
 80053c4:	b236      	sxthne	r6, r6
 80053c6:	e7ef      	b.n	80053a8 <_printf_i+0xbc>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	6820      	ldr	r0, [r4, #0]
 80053cc:	1d19      	adds	r1, r3, #4
 80053ce:	6029      	str	r1, [r5, #0]
 80053d0:	0601      	lsls	r1, r0, #24
 80053d2:	d501      	bpl.n	80053d8 <_printf_i+0xec>
 80053d4:	681e      	ldr	r6, [r3, #0]
 80053d6:	e002      	b.n	80053de <_printf_i+0xf2>
 80053d8:	0646      	lsls	r6, r0, #25
 80053da:	d5fb      	bpl.n	80053d4 <_printf_i+0xe8>
 80053dc:	881e      	ldrh	r6, [r3, #0]
 80053de:	4854      	ldr	r0, [pc, #336]	; (8005530 <_printf_i+0x244>)
 80053e0:	2f6f      	cmp	r7, #111	; 0x6f
 80053e2:	bf0c      	ite	eq
 80053e4:	2308      	moveq	r3, #8
 80053e6:	230a      	movne	r3, #10
 80053e8:	2100      	movs	r1, #0
 80053ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053ee:	6865      	ldr	r5, [r4, #4]
 80053f0:	60a5      	str	r5, [r4, #8]
 80053f2:	2d00      	cmp	r5, #0
 80053f4:	bfa2      	ittt	ge
 80053f6:	6821      	ldrge	r1, [r4, #0]
 80053f8:	f021 0104 	bicge.w	r1, r1, #4
 80053fc:	6021      	strge	r1, [r4, #0]
 80053fe:	b90e      	cbnz	r6, 8005404 <_printf_i+0x118>
 8005400:	2d00      	cmp	r5, #0
 8005402:	d04d      	beq.n	80054a0 <_printf_i+0x1b4>
 8005404:	4615      	mov	r5, r2
 8005406:	fbb6 f1f3 	udiv	r1, r6, r3
 800540a:	fb03 6711 	mls	r7, r3, r1, r6
 800540e:	5dc7      	ldrb	r7, [r0, r7]
 8005410:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005414:	4637      	mov	r7, r6
 8005416:	42bb      	cmp	r3, r7
 8005418:	460e      	mov	r6, r1
 800541a:	d9f4      	bls.n	8005406 <_printf_i+0x11a>
 800541c:	2b08      	cmp	r3, #8
 800541e:	d10b      	bne.n	8005438 <_printf_i+0x14c>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	07de      	lsls	r6, r3, #31
 8005424:	d508      	bpl.n	8005438 <_printf_i+0x14c>
 8005426:	6923      	ldr	r3, [r4, #16]
 8005428:	6861      	ldr	r1, [r4, #4]
 800542a:	4299      	cmp	r1, r3
 800542c:	bfde      	ittt	le
 800542e:	2330      	movle	r3, #48	; 0x30
 8005430:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005434:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005438:	1b52      	subs	r2, r2, r5
 800543a:	6122      	str	r2, [r4, #16]
 800543c:	f8cd a000 	str.w	sl, [sp]
 8005440:	464b      	mov	r3, r9
 8005442:	aa03      	add	r2, sp, #12
 8005444:	4621      	mov	r1, r4
 8005446:	4640      	mov	r0, r8
 8005448:	f7ff fee2 	bl	8005210 <_printf_common>
 800544c:	3001      	adds	r0, #1
 800544e:	d14c      	bne.n	80054ea <_printf_i+0x1fe>
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	b004      	add	sp, #16
 8005456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800545a:	4835      	ldr	r0, [pc, #212]	; (8005530 <_printf_i+0x244>)
 800545c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005460:	6829      	ldr	r1, [r5, #0]
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	f851 6b04 	ldr.w	r6, [r1], #4
 8005468:	6029      	str	r1, [r5, #0]
 800546a:	061d      	lsls	r5, r3, #24
 800546c:	d514      	bpl.n	8005498 <_printf_i+0x1ac>
 800546e:	07df      	lsls	r7, r3, #31
 8005470:	bf44      	itt	mi
 8005472:	f043 0320 	orrmi.w	r3, r3, #32
 8005476:	6023      	strmi	r3, [r4, #0]
 8005478:	b91e      	cbnz	r6, 8005482 <_printf_i+0x196>
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	f023 0320 	bic.w	r3, r3, #32
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	2310      	movs	r3, #16
 8005484:	e7b0      	b.n	80053e8 <_printf_i+0xfc>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	f043 0320 	orr.w	r3, r3, #32
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	2378      	movs	r3, #120	; 0x78
 8005490:	4828      	ldr	r0, [pc, #160]	; (8005534 <_printf_i+0x248>)
 8005492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005496:	e7e3      	b.n	8005460 <_printf_i+0x174>
 8005498:	0659      	lsls	r1, r3, #25
 800549a:	bf48      	it	mi
 800549c:	b2b6      	uxthmi	r6, r6
 800549e:	e7e6      	b.n	800546e <_printf_i+0x182>
 80054a0:	4615      	mov	r5, r2
 80054a2:	e7bb      	b.n	800541c <_printf_i+0x130>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	6826      	ldr	r6, [r4, #0]
 80054a8:	6961      	ldr	r1, [r4, #20]
 80054aa:	1d18      	adds	r0, r3, #4
 80054ac:	6028      	str	r0, [r5, #0]
 80054ae:	0635      	lsls	r5, r6, #24
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	d501      	bpl.n	80054b8 <_printf_i+0x1cc>
 80054b4:	6019      	str	r1, [r3, #0]
 80054b6:	e002      	b.n	80054be <_printf_i+0x1d2>
 80054b8:	0670      	lsls	r0, r6, #25
 80054ba:	d5fb      	bpl.n	80054b4 <_printf_i+0x1c8>
 80054bc:	8019      	strh	r1, [r3, #0]
 80054be:	2300      	movs	r3, #0
 80054c0:	6123      	str	r3, [r4, #16]
 80054c2:	4615      	mov	r5, r2
 80054c4:	e7ba      	b.n	800543c <_printf_i+0x150>
 80054c6:	682b      	ldr	r3, [r5, #0]
 80054c8:	1d1a      	adds	r2, r3, #4
 80054ca:	602a      	str	r2, [r5, #0]
 80054cc:	681d      	ldr	r5, [r3, #0]
 80054ce:	6862      	ldr	r2, [r4, #4]
 80054d0:	2100      	movs	r1, #0
 80054d2:	4628      	mov	r0, r5
 80054d4:	f7fa fe7c 	bl	80001d0 <memchr>
 80054d8:	b108      	cbz	r0, 80054de <_printf_i+0x1f2>
 80054da:	1b40      	subs	r0, r0, r5
 80054dc:	6060      	str	r0, [r4, #4]
 80054de:	6863      	ldr	r3, [r4, #4]
 80054e0:	6123      	str	r3, [r4, #16]
 80054e2:	2300      	movs	r3, #0
 80054e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054e8:	e7a8      	b.n	800543c <_printf_i+0x150>
 80054ea:	6923      	ldr	r3, [r4, #16]
 80054ec:	462a      	mov	r2, r5
 80054ee:	4649      	mov	r1, r9
 80054f0:	4640      	mov	r0, r8
 80054f2:	47d0      	blx	sl
 80054f4:	3001      	adds	r0, #1
 80054f6:	d0ab      	beq.n	8005450 <_printf_i+0x164>
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	079b      	lsls	r3, r3, #30
 80054fc:	d413      	bmi.n	8005526 <_printf_i+0x23a>
 80054fe:	68e0      	ldr	r0, [r4, #12]
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	4298      	cmp	r0, r3
 8005504:	bfb8      	it	lt
 8005506:	4618      	movlt	r0, r3
 8005508:	e7a4      	b.n	8005454 <_printf_i+0x168>
 800550a:	2301      	movs	r3, #1
 800550c:	4632      	mov	r2, r6
 800550e:	4649      	mov	r1, r9
 8005510:	4640      	mov	r0, r8
 8005512:	47d0      	blx	sl
 8005514:	3001      	adds	r0, #1
 8005516:	d09b      	beq.n	8005450 <_printf_i+0x164>
 8005518:	3501      	adds	r5, #1
 800551a:	68e3      	ldr	r3, [r4, #12]
 800551c:	9903      	ldr	r1, [sp, #12]
 800551e:	1a5b      	subs	r3, r3, r1
 8005520:	42ab      	cmp	r3, r5
 8005522:	dcf2      	bgt.n	800550a <_printf_i+0x21e>
 8005524:	e7eb      	b.n	80054fe <_printf_i+0x212>
 8005526:	2500      	movs	r5, #0
 8005528:	f104 0619 	add.w	r6, r4, #25
 800552c:	e7f5      	b.n	800551a <_printf_i+0x22e>
 800552e:	bf00      	nop
 8005530:	08005e53 	.word	0x08005e53
 8005534:	08005e64 	.word	0x08005e64

08005538 <_sbrk_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4d06      	ldr	r5, [pc, #24]	; (8005554 <_sbrk_r+0x1c>)
 800553c:	2300      	movs	r3, #0
 800553e:	4604      	mov	r4, r0
 8005540:	4608      	mov	r0, r1
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	f7fc f886 	bl	8001654 <_sbrk>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_sbrk_r+0x1a>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_sbrk_r+0x1a>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	20000170 	.word	0x20000170

08005558 <__swbuf_r>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	460e      	mov	r6, r1
 800555c:	4614      	mov	r4, r2
 800555e:	4605      	mov	r5, r0
 8005560:	b118      	cbz	r0, 800556a <__swbuf_r+0x12>
 8005562:	6983      	ldr	r3, [r0, #24]
 8005564:	b90b      	cbnz	r3, 800556a <__swbuf_r+0x12>
 8005566:	f000 f9d9 	bl	800591c <__sinit>
 800556a:	4b21      	ldr	r3, [pc, #132]	; (80055f0 <__swbuf_r+0x98>)
 800556c:	429c      	cmp	r4, r3
 800556e:	d12b      	bne.n	80055c8 <__swbuf_r+0x70>
 8005570:	686c      	ldr	r4, [r5, #4]
 8005572:	69a3      	ldr	r3, [r4, #24]
 8005574:	60a3      	str	r3, [r4, #8]
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	071a      	lsls	r2, r3, #28
 800557a:	d52f      	bpl.n	80055dc <__swbuf_r+0x84>
 800557c:	6923      	ldr	r3, [r4, #16]
 800557e:	b36b      	cbz	r3, 80055dc <__swbuf_r+0x84>
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	6820      	ldr	r0, [r4, #0]
 8005584:	1ac0      	subs	r0, r0, r3
 8005586:	6963      	ldr	r3, [r4, #20]
 8005588:	b2f6      	uxtb	r6, r6
 800558a:	4283      	cmp	r3, r0
 800558c:	4637      	mov	r7, r6
 800558e:	dc04      	bgt.n	800559a <__swbuf_r+0x42>
 8005590:	4621      	mov	r1, r4
 8005592:	4628      	mov	r0, r5
 8005594:	f000 f92e 	bl	80057f4 <_fflush_r>
 8005598:	bb30      	cbnz	r0, 80055e8 <__swbuf_r+0x90>
 800559a:	68a3      	ldr	r3, [r4, #8]
 800559c:	3b01      	subs	r3, #1
 800559e:	60a3      	str	r3, [r4, #8]
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	1c5a      	adds	r2, r3, #1
 80055a4:	6022      	str	r2, [r4, #0]
 80055a6:	701e      	strb	r6, [r3, #0]
 80055a8:	6963      	ldr	r3, [r4, #20]
 80055aa:	3001      	adds	r0, #1
 80055ac:	4283      	cmp	r3, r0
 80055ae:	d004      	beq.n	80055ba <__swbuf_r+0x62>
 80055b0:	89a3      	ldrh	r3, [r4, #12]
 80055b2:	07db      	lsls	r3, r3, #31
 80055b4:	d506      	bpl.n	80055c4 <__swbuf_r+0x6c>
 80055b6:	2e0a      	cmp	r6, #10
 80055b8:	d104      	bne.n	80055c4 <__swbuf_r+0x6c>
 80055ba:	4621      	mov	r1, r4
 80055bc:	4628      	mov	r0, r5
 80055be:	f000 f919 	bl	80057f4 <_fflush_r>
 80055c2:	b988      	cbnz	r0, 80055e8 <__swbuf_r+0x90>
 80055c4:	4638      	mov	r0, r7
 80055c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055c8:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <__swbuf_r+0x9c>)
 80055ca:	429c      	cmp	r4, r3
 80055cc:	d101      	bne.n	80055d2 <__swbuf_r+0x7a>
 80055ce:	68ac      	ldr	r4, [r5, #8]
 80055d0:	e7cf      	b.n	8005572 <__swbuf_r+0x1a>
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <__swbuf_r+0xa0>)
 80055d4:	429c      	cmp	r4, r3
 80055d6:	bf08      	it	eq
 80055d8:	68ec      	ldreq	r4, [r5, #12]
 80055da:	e7ca      	b.n	8005572 <__swbuf_r+0x1a>
 80055dc:	4621      	mov	r1, r4
 80055de:	4628      	mov	r0, r5
 80055e0:	f000 f80c 	bl	80055fc <__swsetup_r>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d0cb      	beq.n	8005580 <__swbuf_r+0x28>
 80055e8:	f04f 37ff 	mov.w	r7, #4294967295
 80055ec:	e7ea      	b.n	80055c4 <__swbuf_r+0x6c>
 80055ee:	bf00      	nop
 80055f0:	08005e98 	.word	0x08005e98
 80055f4:	08005eb8 	.word	0x08005eb8
 80055f8:	08005e78 	.word	0x08005e78

080055fc <__swsetup_r>:
 80055fc:	4b32      	ldr	r3, [pc, #200]	; (80056c8 <__swsetup_r+0xcc>)
 80055fe:	b570      	push	{r4, r5, r6, lr}
 8005600:	681d      	ldr	r5, [r3, #0]
 8005602:	4606      	mov	r6, r0
 8005604:	460c      	mov	r4, r1
 8005606:	b125      	cbz	r5, 8005612 <__swsetup_r+0x16>
 8005608:	69ab      	ldr	r3, [r5, #24]
 800560a:	b913      	cbnz	r3, 8005612 <__swsetup_r+0x16>
 800560c:	4628      	mov	r0, r5
 800560e:	f000 f985 	bl	800591c <__sinit>
 8005612:	4b2e      	ldr	r3, [pc, #184]	; (80056cc <__swsetup_r+0xd0>)
 8005614:	429c      	cmp	r4, r3
 8005616:	d10f      	bne.n	8005638 <__swsetup_r+0x3c>
 8005618:	686c      	ldr	r4, [r5, #4]
 800561a:	89a3      	ldrh	r3, [r4, #12]
 800561c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005620:	0719      	lsls	r1, r3, #28
 8005622:	d42c      	bmi.n	800567e <__swsetup_r+0x82>
 8005624:	06dd      	lsls	r5, r3, #27
 8005626:	d411      	bmi.n	800564c <__swsetup_r+0x50>
 8005628:	2309      	movs	r3, #9
 800562a:	6033      	str	r3, [r6, #0]
 800562c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005630:	81a3      	strh	r3, [r4, #12]
 8005632:	f04f 30ff 	mov.w	r0, #4294967295
 8005636:	e03e      	b.n	80056b6 <__swsetup_r+0xba>
 8005638:	4b25      	ldr	r3, [pc, #148]	; (80056d0 <__swsetup_r+0xd4>)
 800563a:	429c      	cmp	r4, r3
 800563c:	d101      	bne.n	8005642 <__swsetup_r+0x46>
 800563e:	68ac      	ldr	r4, [r5, #8]
 8005640:	e7eb      	b.n	800561a <__swsetup_r+0x1e>
 8005642:	4b24      	ldr	r3, [pc, #144]	; (80056d4 <__swsetup_r+0xd8>)
 8005644:	429c      	cmp	r4, r3
 8005646:	bf08      	it	eq
 8005648:	68ec      	ldreq	r4, [r5, #12]
 800564a:	e7e6      	b.n	800561a <__swsetup_r+0x1e>
 800564c:	0758      	lsls	r0, r3, #29
 800564e:	d512      	bpl.n	8005676 <__swsetup_r+0x7a>
 8005650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005652:	b141      	cbz	r1, 8005666 <__swsetup_r+0x6a>
 8005654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005658:	4299      	cmp	r1, r3
 800565a:	d002      	beq.n	8005662 <__swsetup_r+0x66>
 800565c:	4630      	mov	r0, r6
 800565e:	f7ff fb9d 	bl	8004d9c <_free_r>
 8005662:	2300      	movs	r3, #0
 8005664:	6363      	str	r3, [r4, #52]	; 0x34
 8005666:	89a3      	ldrh	r3, [r4, #12]
 8005668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800566c:	81a3      	strh	r3, [r4, #12]
 800566e:	2300      	movs	r3, #0
 8005670:	6063      	str	r3, [r4, #4]
 8005672:	6923      	ldr	r3, [r4, #16]
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	f043 0308 	orr.w	r3, r3, #8
 800567c:	81a3      	strh	r3, [r4, #12]
 800567e:	6923      	ldr	r3, [r4, #16]
 8005680:	b94b      	cbnz	r3, 8005696 <__swsetup_r+0x9a>
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800568c:	d003      	beq.n	8005696 <__swsetup_r+0x9a>
 800568e:	4621      	mov	r1, r4
 8005690:	4630      	mov	r0, r6
 8005692:	f000 fa09 	bl	8005aa8 <__smakebuf_r>
 8005696:	89a0      	ldrh	r0, [r4, #12]
 8005698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800569c:	f010 0301 	ands.w	r3, r0, #1
 80056a0:	d00a      	beq.n	80056b8 <__swsetup_r+0xbc>
 80056a2:	2300      	movs	r3, #0
 80056a4:	60a3      	str	r3, [r4, #8]
 80056a6:	6963      	ldr	r3, [r4, #20]
 80056a8:	425b      	negs	r3, r3
 80056aa:	61a3      	str	r3, [r4, #24]
 80056ac:	6923      	ldr	r3, [r4, #16]
 80056ae:	b943      	cbnz	r3, 80056c2 <__swsetup_r+0xc6>
 80056b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80056b4:	d1ba      	bne.n	800562c <__swsetup_r+0x30>
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
 80056b8:	0781      	lsls	r1, r0, #30
 80056ba:	bf58      	it	pl
 80056bc:	6963      	ldrpl	r3, [r4, #20]
 80056be:	60a3      	str	r3, [r4, #8]
 80056c0:	e7f4      	b.n	80056ac <__swsetup_r+0xb0>
 80056c2:	2000      	movs	r0, #0
 80056c4:	e7f7      	b.n	80056b6 <__swsetup_r+0xba>
 80056c6:	bf00      	nop
 80056c8:	20000010 	.word	0x20000010
 80056cc:	08005e98 	.word	0x08005e98
 80056d0:	08005eb8 	.word	0x08005eb8
 80056d4:	08005e78 	.word	0x08005e78

080056d8 <abort>:
 80056d8:	b508      	push	{r3, lr}
 80056da:	2006      	movs	r0, #6
 80056dc:	f000 fa58 	bl	8005b90 <raise>
 80056e0:	2001      	movs	r0, #1
 80056e2:	f7fb ff3f 	bl	8001564 <_exit>
	...

080056e8 <__sflush_r>:
 80056e8:	898a      	ldrh	r2, [r1, #12]
 80056ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ee:	4605      	mov	r5, r0
 80056f0:	0710      	lsls	r0, r2, #28
 80056f2:	460c      	mov	r4, r1
 80056f4:	d458      	bmi.n	80057a8 <__sflush_r+0xc0>
 80056f6:	684b      	ldr	r3, [r1, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	dc05      	bgt.n	8005708 <__sflush_r+0x20>
 80056fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	dc02      	bgt.n	8005708 <__sflush_r+0x20>
 8005702:	2000      	movs	r0, #0
 8005704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800570a:	2e00      	cmp	r6, #0
 800570c:	d0f9      	beq.n	8005702 <__sflush_r+0x1a>
 800570e:	2300      	movs	r3, #0
 8005710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005714:	682f      	ldr	r7, [r5, #0]
 8005716:	602b      	str	r3, [r5, #0]
 8005718:	d032      	beq.n	8005780 <__sflush_r+0x98>
 800571a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800571c:	89a3      	ldrh	r3, [r4, #12]
 800571e:	075a      	lsls	r2, r3, #29
 8005720:	d505      	bpl.n	800572e <__sflush_r+0x46>
 8005722:	6863      	ldr	r3, [r4, #4]
 8005724:	1ac0      	subs	r0, r0, r3
 8005726:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005728:	b10b      	cbz	r3, 800572e <__sflush_r+0x46>
 800572a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800572c:	1ac0      	subs	r0, r0, r3
 800572e:	2300      	movs	r3, #0
 8005730:	4602      	mov	r2, r0
 8005732:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005734:	6a21      	ldr	r1, [r4, #32]
 8005736:	4628      	mov	r0, r5
 8005738:	47b0      	blx	r6
 800573a:	1c43      	adds	r3, r0, #1
 800573c:	89a3      	ldrh	r3, [r4, #12]
 800573e:	d106      	bne.n	800574e <__sflush_r+0x66>
 8005740:	6829      	ldr	r1, [r5, #0]
 8005742:	291d      	cmp	r1, #29
 8005744:	d82c      	bhi.n	80057a0 <__sflush_r+0xb8>
 8005746:	4a2a      	ldr	r2, [pc, #168]	; (80057f0 <__sflush_r+0x108>)
 8005748:	40ca      	lsrs	r2, r1
 800574a:	07d6      	lsls	r6, r2, #31
 800574c:	d528      	bpl.n	80057a0 <__sflush_r+0xb8>
 800574e:	2200      	movs	r2, #0
 8005750:	6062      	str	r2, [r4, #4]
 8005752:	04d9      	lsls	r1, r3, #19
 8005754:	6922      	ldr	r2, [r4, #16]
 8005756:	6022      	str	r2, [r4, #0]
 8005758:	d504      	bpl.n	8005764 <__sflush_r+0x7c>
 800575a:	1c42      	adds	r2, r0, #1
 800575c:	d101      	bne.n	8005762 <__sflush_r+0x7a>
 800575e:	682b      	ldr	r3, [r5, #0]
 8005760:	b903      	cbnz	r3, 8005764 <__sflush_r+0x7c>
 8005762:	6560      	str	r0, [r4, #84]	; 0x54
 8005764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005766:	602f      	str	r7, [r5, #0]
 8005768:	2900      	cmp	r1, #0
 800576a:	d0ca      	beq.n	8005702 <__sflush_r+0x1a>
 800576c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005770:	4299      	cmp	r1, r3
 8005772:	d002      	beq.n	800577a <__sflush_r+0x92>
 8005774:	4628      	mov	r0, r5
 8005776:	f7ff fb11 	bl	8004d9c <_free_r>
 800577a:	2000      	movs	r0, #0
 800577c:	6360      	str	r0, [r4, #52]	; 0x34
 800577e:	e7c1      	b.n	8005704 <__sflush_r+0x1c>
 8005780:	6a21      	ldr	r1, [r4, #32]
 8005782:	2301      	movs	r3, #1
 8005784:	4628      	mov	r0, r5
 8005786:	47b0      	blx	r6
 8005788:	1c41      	adds	r1, r0, #1
 800578a:	d1c7      	bne.n	800571c <__sflush_r+0x34>
 800578c:	682b      	ldr	r3, [r5, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0c4      	beq.n	800571c <__sflush_r+0x34>
 8005792:	2b1d      	cmp	r3, #29
 8005794:	d001      	beq.n	800579a <__sflush_r+0xb2>
 8005796:	2b16      	cmp	r3, #22
 8005798:	d101      	bne.n	800579e <__sflush_r+0xb6>
 800579a:	602f      	str	r7, [r5, #0]
 800579c:	e7b1      	b.n	8005702 <__sflush_r+0x1a>
 800579e:	89a3      	ldrh	r3, [r4, #12]
 80057a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057a4:	81a3      	strh	r3, [r4, #12]
 80057a6:	e7ad      	b.n	8005704 <__sflush_r+0x1c>
 80057a8:	690f      	ldr	r7, [r1, #16]
 80057aa:	2f00      	cmp	r7, #0
 80057ac:	d0a9      	beq.n	8005702 <__sflush_r+0x1a>
 80057ae:	0793      	lsls	r3, r2, #30
 80057b0:	680e      	ldr	r6, [r1, #0]
 80057b2:	bf08      	it	eq
 80057b4:	694b      	ldreq	r3, [r1, #20]
 80057b6:	600f      	str	r7, [r1, #0]
 80057b8:	bf18      	it	ne
 80057ba:	2300      	movne	r3, #0
 80057bc:	eba6 0807 	sub.w	r8, r6, r7
 80057c0:	608b      	str	r3, [r1, #8]
 80057c2:	f1b8 0f00 	cmp.w	r8, #0
 80057c6:	dd9c      	ble.n	8005702 <__sflush_r+0x1a>
 80057c8:	6a21      	ldr	r1, [r4, #32]
 80057ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057cc:	4643      	mov	r3, r8
 80057ce:	463a      	mov	r2, r7
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b0      	blx	r6
 80057d4:	2800      	cmp	r0, #0
 80057d6:	dc06      	bgt.n	80057e6 <__sflush_r+0xfe>
 80057d8:	89a3      	ldrh	r3, [r4, #12]
 80057da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057de:	81a3      	strh	r3, [r4, #12]
 80057e0:	f04f 30ff 	mov.w	r0, #4294967295
 80057e4:	e78e      	b.n	8005704 <__sflush_r+0x1c>
 80057e6:	4407      	add	r7, r0
 80057e8:	eba8 0800 	sub.w	r8, r8, r0
 80057ec:	e7e9      	b.n	80057c2 <__sflush_r+0xda>
 80057ee:	bf00      	nop
 80057f0:	20400001 	.word	0x20400001

080057f4 <_fflush_r>:
 80057f4:	b538      	push	{r3, r4, r5, lr}
 80057f6:	690b      	ldr	r3, [r1, #16]
 80057f8:	4605      	mov	r5, r0
 80057fa:	460c      	mov	r4, r1
 80057fc:	b913      	cbnz	r3, 8005804 <_fflush_r+0x10>
 80057fe:	2500      	movs	r5, #0
 8005800:	4628      	mov	r0, r5
 8005802:	bd38      	pop	{r3, r4, r5, pc}
 8005804:	b118      	cbz	r0, 800580e <_fflush_r+0x1a>
 8005806:	6983      	ldr	r3, [r0, #24]
 8005808:	b90b      	cbnz	r3, 800580e <_fflush_r+0x1a>
 800580a:	f000 f887 	bl	800591c <__sinit>
 800580e:	4b14      	ldr	r3, [pc, #80]	; (8005860 <_fflush_r+0x6c>)
 8005810:	429c      	cmp	r4, r3
 8005812:	d11b      	bne.n	800584c <_fflush_r+0x58>
 8005814:	686c      	ldr	r4, [r5, #4]
 8005816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0ef      	beq.n	80057fe <_fflush_r+0xa>
 800581e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005820:	07d0      	lsls	r0, r2, #31
 8005822:	d404      	bmi.n	800582e <_fflush_r+0x3a>
 8005824:	0599      	lsls	r1, r3, #22
 8005826:	d402      	bmi.n	800582e <_fflush_r+0x3a>
 8005828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800582a:	f000 f915 	bl	8005a58 <__retarget_lock_acquire_recursive>
 800582e:	4628      	mov	r0, r5
 8005830:	4621      	mov	r1, r4
 8005832:	f7ff ff59 	bl	80056e8 <__sflush_r>
 8005836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005838:	07da      	lsls	r2, r3, #31
 800583a:	4605      	mov	r5, r0
 800583c:	d4e0      	bmi.n	8005800 <_fflush_r+0xc>
 800583e:	89a3      	ldrh	r3, [r4, #12]
 8005840:	059b      	lsls	r3, r3, #22
 8005842:	d4dd      	bmi.n	8005800 <_fflush_r+0xc>
 8005844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005846:	f000 f908 	bl	8005a5a <__retarget_lock_release_recursive>
 800584a:	e7d9      	b.n	8005800 <_fflush_r+0xc>
 800584c:	4b05      	ldr	r3, [pc, #20]	; (8005864 <_fflush_r+0x70>)
 800584e:	429c      	cmp	r4, r3
 8005850:	d101      	bne.n	8005856 <_fflush_r+0x62>
 8005852:	68ac      	ldr	r4, [r5, #8]
 8005854:	e7df      	b.n	8005816 <_fflush_r+0x22>
 8005856:	4b04      	ldr	r3, [pc, #16]	; (8005868 <_fflush_r+0x74>)
 8005858:	429c      	cmp	r4, r3
 800585a:	bf08      	it	eq
 800585c:	68ec      	ldreq	r4, [r5, #12]
 800585e:	e7da      	b.n	8005816 <_fflush_r+0x22>
 8005860:	08005e98 	.word	0x08005e98
 8005864:	08005eb8 	.word	0x08005eb8
 8005868:	08005e78 	.word	0x08005e78

0800586c <std>:
 800586c:	2300      	movs	r3, #0
 800586e:	b510      	push	{r4, lr}
 8005870:	4604      	mov	r4, r0
 8005872:	e9c0 3300 	strd	r3, r3, [r0]
 8005876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800587a:	6083      	str	r3, [r0, #8]
 800587c:	8181      	strh	r1, [r0, #12]
 800587e:	6643      	str	r3, [r0, #100]	; 0x64
 8005880:	81c2      	strh	r2, [r0, #14]
 8005882:	6183      	str	r3, [r0, #24]
 8005884:	4619      	mov	r1, r3
 8005886:	2208      	movs	r2, #8
 8005888:	305c      	adds	r0, #92	; 0x5c
 800588a:	f7ff f9af 	bl	8004bec <memset>
 800588e:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <std+0x38>)
 8005890:	6263      	str	r3, [r4, #36]	; 0x24
 8005892:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <std+0x3c>)
 8005894:	62a3      	str	r3, [r4, #40]	; 0x28
 8005896:	4b05      	ldr	r3, [pc, #20]	; (80058ac <std+0x40>)
 8005898:	62e3      	str	r3, [r4, #44]	; 0x2c
 800589a:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <std+0x44>)
 800589c:	6224      	str	r4, [r4, #32]
 800589e:	6323      	str	r3, [r4, #48]	; 0x30
 80058a0:	bd10      	pop	{r4, pc}
 80058a2:	bf00      	nop
 80058a4:	08005bc9 	.word	0x08005bc9
 80058a8:	08005beb 	.word	0x08005beb
 80058ac:	08005c23 	.word	0x08005c23
 80058b0:	08005c47 	.word	0x08005c47

080058b4 <_cleanup_r>:
 80058b4:	4901      	ldr	r1, [pc, #4]	; (80058bc <_cleanup_r+0x8>)
 80058b6:	f000 b8af 	b.w	8005a18 <_fwalk_reent>
 80058ba:	bf00      	nop
 80058bc:	080057f5 	.word	0x080057f5

080058c0 <__sfmoreglue>:
 80058c0:	b570      	push	{r4, r5, r6, lr}
 80058c2:	2268      	movs	r2, #104	; 0x68
 80058c4:	1e4d      	subs	r5, r1, #1
 80058c6:	4355      	muls	r5, r2
 80058c8:	460e      	mov	r6, r1
 80058ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058ce:	f7ff fad1 	bl	8004e74 <_malloc_r>
 80058d2:	4604      	mov	r4, r0
 80058d4:	b140      	cbz	r0, 80058e8 <__sfmoreglue+0x28>
 80058d6:	2100      	movs	r1, #0
 80058d8:	e9c0 1600 	strd	r1, r6, [r0]
 80058dc:	300c      	adds	r0, #12
 80058de:	60a0      	str	r0, [r4, #8]
 80058e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058e4:	f7ff f982 	bl	8004bec <memset>
 80058e8:	4620      	mov	r0, r4
 80058ea:	bd70      	pop	{r4, r5, r6, pc}

080058ec <__sfp_lock_acquire>:
 80058ec:	4801      	ldr	r0, [pc, #4]	; (80058f4 <__sfp_lock_acquire+0x8>)
 80058ee:	f000 b8b3 	b.w	8005a58 <__retarget_lock_acquire_recursive>
 80058f2:	bf00      	nop
 80058f4:	20000175 	.word	0x20000175

080058f8 <__sfp_lock_release>:
 80058f8:	4801      	ldr	r0, [pc, #4]	; (8005900 <__sfp_lock_release+0x8>)
 80058fa:	f000 b8ae 	b.w	8005a5a <__retarget_lock_release_recursive>
 80058fe:	bf00      	nop
 8005900:	20000175 	.word	0x20000175

08005904 <__sinit_lock_acquire>:
 8005904:	4801      	ldr	r0, [pc, #4]	; (800590c <__sinit_lock_acquire+0x8>)
 8005906:	f000 b8a7 	b.w	8005a58 <__retarget_lock_acquire_recursive>
 800590a:	bf00      	nop
 800590c:	20000176 	.word	0x20000176

08005910 <__sinit_lock_release>:
 8005910:	4801      	ldr	r0, [pc, #4]	; (8005918 <__sinit_lock_release+0x8>)
 8005912:	f000 b8a2 	b.w	8005a5a <__retarget_lock_release_recursive>
 8005916:	bf00      	nop
 8005918:	20000176 	.word	0x20000176

0800591c <__sinit>:
 800591c:	b510      	push	{r4, lr}
 800591e:	4604      	mov	r4, r0
 8005920:	f7ff fff0 	bl	8005904 <__sinit_lock_acquire>
 8005924:	69a3      	ldr	r3, [r4, #24]
 8005926:	b11b      	cbz	r3, 8005930 <__sinit+0x14>
 8005928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800592c:	f7ff bff0 	b.w	8005910 <__sinit_lock_release>
 8005930:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005934:	6523      	str	r3, [r4, #80]	; 0x50
 8005936:	4b13      	ldr	r3, [pc, #76]	; (8005984 <__sinit+0x68>)
 8005938:	4a13      	ldr	r2, [pc, #76]	; (8005988 <__sinit+0x6c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	62a2      	str	r2, [r4, #40]	; 0x28
 800593e:	42a3      	cmp	r3, r4
 8005940:	bf04      	itt	eq
 8005942:	2301      	moveq	r3, #1
 8005944:	61a3      	streq	r3, [r4, #24]
 8005946:	4620      	mov	r0, r4
 8005948:	f000 f820 	bl	800598c <__sfp>
 800594c:	6060      	str	r0, [r4, #4]
 800594e:	4620      	mov	r0, r4
 8005950:	f000 f81c 	bl	800598c <__sfp>
 8005954:	60a0      	str	r0, [r4, #8]
 8005956:	4620      	mov	r0, r4
 8005958:	f000 f818 	bl	800598c <__sfp>
 800595c:	2200      	movs	r2, #0
 800595e:	60e0      	str	r0, [r4, #12]
 8005960:	2104      	movs	r1, #4
 8005962:	6860      	ldr	r0, [r4, #4]
 8005964:	f7ff ff82 	bl	800586c <std>
 8005968:	68a0      	ldr	r0, [r4, #8]
 800596a:	2201      	movs	r2, #1
 800596c:	2109      	movs	r1, #9
 800596e:	f7ff ff7d 	bl	800586c <std>
 8005972:	68e0      	ldr	r0, [r4, #12]
 8005974:	2202      	movs	r2, #2
 8005976:	2112      	movs	r1, #18
 8005978:	f7ff ff78 	bl	800586c <std>
 800597c:	2301      	movs	r3, #1
 800597e:	61a3      	str	r3, [r4, #24]
 8005980:	e7d2      	b.n	8005928 <__sinit+0xc>
 8005982:	bf00      	nop
 8005984:	08005d90 	.word	0x08005d90
 8005988:	080058b5 	.word	0x080058b5

0800598c <__sfp>:
 800598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598e:	4607      	mov	r7, r0
 8005990:	f7ff ffac 	bl	80058ec <__sfp_lock_acquire>
 8005994:	4b1e      	ldr	r3, [pc, #120]	; (8005a10 <__sfp+0x84>)
 8005996:	681e      	ldr	r6, [r3, #0]
 8005998:	69b3      	ldr	r3, [r6, #24]
 800599a:	b913      	cbnz	r3, 80059a2 <__sfp+0x16>
 800599c:	4630      	mov	r0, r6
 800599e:	f7ff ffbd 	bl	800591c <__sinit>
 80059a2:	3648      	adds	r6, #72	; 0x48
 80059a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	d503      	bpl.n	80059b4 <__sfp+0x28>
 80059ac:	6833      	ldr	r3, [r6, #0]
 80059ae:	b30b      	cbz	r3, 80059f4 <__sfp+0x68>
 80059b0:	6836      	ldr	r6, [r6, #0]
 80059b2:	e7f7      	b.n	80059a4 <__sfp+0x18>
 80059b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059b8:	b9d5      	cbnz	r5, 80059f0 <__sfp+0x64>
 80059ba:	4b16      	ldr	r3, [pc, #88]	; (8005a14 <__sfp+0x88>)
 80059bc:	60e3      	str	r3, [r4, #12]
 80059be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059c2:	6665      	str	r5, [r4, #100]	; 0x64
 80059c4:	f000 f847 	bl	8005a56 <__retarget_lock_init_recursive>
 80059c8:	f7ff ff96 	bl	80058f8 <__sfp_lock_release>
 80059cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80059d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80059d4:	6025      	str	r5, [r4, #0]
 80059d6:	61a5      	str	r5, [r4, #24]
 80059d8:	2208      	movs	r2, #8
 80059da:	4629      	mov	r1, r5
 80059dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059e0:	f7ff f904 	bl	8004bec <memset>
 80059e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059ec:	4620      	mov	r0, r4
 80059ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f0:	3468      	adds	r4, #104	; 0x68
 80059f2:	e7d9      	b.n	80059a8 <__sfp+0x1c>
 80059f4:	2104      	movs	r1, #4
 80059f6:	4638      	mov	r0, r7
 80059f8:	f7ff ff62 	bl	80058c0 <__sfmoreglue>
 80059fc:	4604      	mov	r4, r0
 80059fe:	6030      	str	r0, [r6, #0]
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d1d5      	bne.n	80059b0 <__sfp+0x24>
 8005a04:	f7ff ff78 	bl	80058f8 <__sfp_lock_release>
 8005a08:	230c      	movs	r3, #12
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	e7ee      	b.n	80059ec <__sfp+0x60>
 8005a0e:	bf00      	nop
 8005a10:	08005d90 	.word	0x08005d90
 8005a14:	ffff0001 	.word	0xffff0001

08005a18 <_fwalk_reent>:
 8005a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a1c:	4606      	mov	r6, r0
 8005a1e:	4688      	mov	r8, r1
 8005a20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a24:	2700      	movs	r7, #0
 8005a26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a2a:	f1b9 0901 	subs.w	r9, r9, #1
 8005a2e:	d505      	bpl.n	8005a3c <_fwalk_reent+0x24>
 8005a30:	6824      	ldr	r4, [r4, #0]
 8005a32:	2c00      	cmp	r4, #0
 8005a34:	d1f7      	bne.n	8005a26 <_fwalk_reent+0xe>
 8005a36:	4638      	mov	r0, r7
 8005a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a3c:	89ab      	ldrh	r3, [r5, #12]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d907      	bls.n	8005a52 <_fwalk_reent+0x3a>
 8005a42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a46:	3301      	adds	r3, #1
 8005a48:	d003      	beq.n	8005a52 <_fwalk_reent+0x3a>
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	47c0      	blx	r8
 8005a50:	4307      	orrs	r7, r0
 8005a52:	3568      	adds	r5, #104	; 0x68
 8005a54:	e7e9      	b.n	8005a2a <_fwalk_reent+0x12>

08005a56 <__retarget_lock_init_recursive>:
 8005a56:	4770      	bx	lr

08005a58 <__retarget_lock_acquire_recursive>:
 8005a58:	4770      	bx	lr

08005a5a <__retarget_lock_release_recursive>:
 8005a5a:	4770      	bx	lr

08005a5c <__swhatbuf_r>:
 8005a5c:	b570      	push	{r4, r5, r6, lr}
 8005a5e:	460e      	mov	r6, r1
 8005a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a64:	2900      	cmp	r1, #0
 8005a66:	b096      	sub	sp, #88	; 0x58
 8005a68:	4614      	mov	r4, r2
 8005a6a:	461d      	mov	r5, r3
 8005a6c:	da08      	bge.n	8005a80 <__swhatbuf_r+0x24>
 8005a6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	602a      	str	r2, [r5, #0]
 8005a76:	061a      	lsls	r2, r3, #24
 8005a78:	d410      	bmi.n	8005a9c <__swhatbuf_r+0x40>
 8005a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a7e:	e00e      	b.n	8005a9e <__swhatbuf_r+0x42>
 8005a80:	466a      	mov	r2, sp
 8005a82:	f000 f907 	bl	8005c94 <_fstat_r>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	dbf1      	blt.n	8005a6e <__swhatbuf_r+0x12>
 8005a8a:	9a01      	ldr	r2, [sp, #4]
 8005a8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a94:	425a      	negs	r2, r3
 8005a96:	415a      	adcs	r2, r3
 8005a98:	602a      	str	r2, [r5, #0]
 8005a9a:	e7ee      	b.n	8005a7a <__swhatbuf_r+0x1e>
 8005a9c:	2340      	movs	r3, #64	; 0x40
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	b016      	add	sp, #88	; 0x58
 8005aa4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005aa8 <__smakebuf_r>:
 8005aa8:	898b      	ldrh	r3, [r1, #12]
 8005aaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005aac:	079d      	lsls	r5, r3, #30
 8005aae:	4606      	mov	r6, r0
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	d507      	bpl.n	8005ac4 <__smakebuf_r+0x1c>
 8005ab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	6123      	str	r3, [r4, #16]
 8005abc:	2301      	movs	r3, #1
 8005abe:	6163      	str	r3, [r4, #20]
 8005ac0:	b002      	add	sp, #8
 8005ac2:	bd70      	pop	{r4, r5, r6, pc}
 8005ac4:	ab01      	add	r3, sp, #4
 8005ac6:	466a      	mov	r2, sp
 8005ac8:	f7ff ffc8 	bl	8005a5c <__swhatbuf_r>
 8005acc:	9900      	ldr	r1, [sp, #0]
 8005ace:	4605      	mov	r5, r0
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	f7ff f9cf 	bl	8004e74 <_malloc_r>
 8005ad6:	b948      	cbnz	r0, 8005aec <__smakebuf_r+0x44>
 8005ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005adc:	059a      	lsls	r2, r3, #22
 8005ade:	d4ef      	bmi.n	8005ac0 <__smakebuf_r+0x18>
 8005ae0:	f023 0303 	bic.w	r3, r3, #3
 8005ae4:	f043 0302 	orr.w	r3, r3, #2
 8005ae8:	81a3      	strh	r3, [r4, #12]
 8005aea:	e7e3      	b.n	8005ab4 <__smakebuf_r+0xc>
 8005aec:	4b0d      	ldr	r3, [pc, #52]	; (8005b24 <__smakebuf_r+0x7c>)
 8005aee:	62b3      	str	r3, [r6, #40]	; 0x28
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	6020      	str	r0, [r4, #0]
 8005af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af8:	81a3      	strh	r3, [r4, #12]
 8005afa:	9b00      	ldr	r3, [sp, #0]
 8005afc:	6163      	str	r3, [r4, #20]
 8005afe:	9b01      	ldr	r3, [sp, #4]
 8005b00:	6120      	str	r0, [r4, #16]
 8005b02:	b15b      	cbz	r3, 8005b1c <__smakebuf_r+0x74>
 8005b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b08:	4630      	mov	r0, r6
 8005b0a:	f000 f8d5 	bl	8005cb8 <_isatty_r>
 8005b0e:	b128      	cbz	r0, 8005b1c <__smakebuf_r+0x74>
 8005b10:	89a3      	ldrh	r3, [r4, #12]
 8005b12:	f023 0303 	bic.w	r3, r3, #3
 8005b16:	f043 0301 	orr.w	r3, r3, #1
 8005b1a:	81a3      	strh	r3, [r4, #12]
 8005b1c:	89a0      	ldrh	r0, [r4, #12]
 8005b1e:	4305      	orrs	r5, r0
 8005b20:	81a5      	strh	r5, [r4, #12]
 8005b22:	e7cd      	b.n	8005ac0 <__smakebuf_r+0x18>
 8005b24:	080058b5 	.word	0x080058b5

08005b28 <__malloc_lock>:
 8005b28:	4801      	ldr	r0, [pc, #4]	; (8005b30 <__malloc_lock+0x8>)
 8005b2a:	f7ff bf95 	b.w	8005a58 <__retarget_lock_acquire_recursive>
 8005b2e:	bf00      	nop
 8005b30:	20000174 	.word	0x20000174

08005b34 <__malloc_unlock>:
 8005b34:	4801      	ldr	r0, [pc, #4]	; (8005b3c <__malloc_unlock+0x8>)
 8005b36:	f7ff bf90 	b.w	8005a5a <__retarget_lock_release_recursive>
 8005b3a:	bf00      	nop
 8005b3c:	20000174 	.word	0x20000174

08005b40 <_raise_r>:
 8005b40:	291f      	cmp	r1, #31
 8005b42:	b538      	push	{r3, r4, r5, lr}
 8005b44:	4604      	mov	r4, r0
 8005b46:	460d      	mov	r5, r1
 8005b48:	d904      	bls.n	8005b54 <_raise_r+0x14>
 8005b4a:	2316      	movs	r3, #22
 8005b4c:	6003      	str	r3, [r0, #0]
 8005b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b52:	bd38      	pop	{r3, r4, r5, pc}
 8005b54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005b56:	b112      	cbz	r2, 8005b5e <_raise_r+0x1e>
 8005b58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b5c:	b94b      	cbnz	r3, 8005b72 <_raise_r+0x32>
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f000 f830 	bl	8005bc4 <_getpid_r>
 8005b64:	462a      	mov	r2, r5
 8005b66:	4601      	mov	r1, r0
 8005b68:	4620      	mov	r0, r4
 8005b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b6e:	f000 b817 	b.w	8005ba0 <_kill_r>
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d00a      	beq.n	8005b8c <_raise_r+0x4c>
 8005b76:	1c59      	adds	r1, r3, #1
 8005b78:	d103      	bne.n	8005b82 <_raise_r+0x42>
 8005b7a:	2316      	movs	r3, #22
 8005b7c:	6003      	str	r3, [r0, #0]
 8005b7e:	2001      	movs	r0, #1
 8005b80:	e7e7      	b.n	8005b52 <_raise_r+0x12>
 8005b82:	2400      	movs	r4, #0
 8005b84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005b88:	4628      	mov	r0, r5
 8005b8a:	4798      	blx	r3
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	e7e0      	b.n	8005b52 <_raise_r+0x12>

08005b90 <raise>:
 8005b90:	4b02      	ldr	r3, [pc, #8]	; (8005b9c <raise+0xc>)
 8005b92:	4601      	mov	r1, r0
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	f7ff bfd3 	b.w	8005b40 <_raise_r>
 8005b9a:	bf00      	nop
 8005b9c:	20000010 	.word	0x20000010

08005ba0 <_kill_r>:
 8005ba0:	b538      	push	{r3, r4, r5, lr}
 8005ba2:	4d07      	ldr	r5, [pc, #28]	; (8005bc0 <_kill_r+0x20>)
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	4608      	mov	r0, r1
 8005baa:	4611      	mov	r1, r2
 8005bac:	602b      	str	r3, [r5, #0]
 8005bae:	f7fb fcc9 	bl	8001544 <_kill>
 8005bb2:	1c43      	adds	r3, r0, #1
 8005bb4:	d102      	bne.n	8005bbc <_kill_r+0x1c>
 8005bb6:	682b      	ldr	r3, [r5, #0]
 8005bb8:	b103      	cbz	r3, 8005bbc <_kill_r+0x1c>
 8005bba:	6023      	str	r3, [r4, #0]
 8005bbc:	bd38      	pop	{r3, r4, r5, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000170 	.word	0x20000170

08005bc4 <_getpid_r>:
 8005bc4:	f7fb bcb6 	b.w	8001534 <_getpid>

08005bc8 <__sread>:
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	460c      	mov	r4, r1
 8005bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd0:	f000 f894 	bl	8005cfc <_read_r>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	bfab      	itete	ge
 8005bd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bda:	89a3      	ldrhlt	r3, [r4, #12]
 8005bdc:	181b      	addge	r3, r3, r0
 8005bde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005be2:	bfac      	ite	ge
 8005be4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005be6:	81a3      	strhlt	r3, [r4, #12]
 8005be8:	bd10      	pop	{r4, pc}

08005bea <__swrite>:
 8005bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bee:	461f      	mov	r7, r3
 8005bf0:	898b      	ldrh	r3, [r1, #12]
 8005bf2:	05db      	lsls	r3, r3, #23
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	4616      	mov	r6, r2
 8005bfa:	d505      	bpl.n	8005c08 <__swrite+0x1e>
 8005bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c00:	2302      	movs	r3, #2
 8005c02:	2200      	movs	r2, #0
 8005c04:	f000 f868 	bl	8005cd8 <_lseek_r>
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c12:	81a3      	strh	r3, [r4, #12]
 8005c14:	4632      	mov	r2, r6
 8005c16:	463b      	mov	r3, r7
 8005c18:	4628      	mov	r0, r5
 8005c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1e:	f000 b817 	b.w	8005c50 <_write_r>

08005c22 <__sseek>:
 8005c22:	b510      	push	{r4, lr}
 8005c24:	460c      	mov	r4, r1
 8005c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c2a:	f000 f855 	bl	8005cd8 <_lseek_r>
 8005c2e:	1c43      	adds	r3, r0, #1
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	bf15      	itete	ne
 8005c34:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c3e:	81a3      	strheq	r3, [r4, #12]
 8005c40:	bf18      	it	ne
 8005c42:	81a3      	strhne	r3, [r4, #12]
 8005c44:	bd10      	pop	{r4, pc}

08005c46 <__sclose>:
 8005c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c4a:	f000 b813 	b.w	8005c74 <_close_r>
	...

08005c50 <_write_r>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	4d07      	ldr	r5, [pc, #28]	; (8005c70 <_write_r+0x20>)
 8005c54:	4604      	mov	r4, r0
 8005c56:	4608      	mov	r0, r1
 8005c58:	4611      	mov	r1, r2
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	602a      	str	r2, [r5, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f7fb fca7 	bl	80015b2 <_write>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	d102      	bne.n	8005c6e <_write_r+0x1e>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	b103      	cbz	r3, 8005c6e <_write_r+0x1e>
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	20000170 	.word	0x20000170

08005c74 <_close_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	4d06      	ldr	r5, [pc, #24]	; (8005c90 <_close_r+0x1c>)
 8005c78:	2300      	movs	r3, #0
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	4608      	mov	r0, r1
 8005c7e:	602b      	str	r3, [r5, #0]
 8005c80:	f7fb fcb3 	bl	80015ea <_close>
 8005c84:	1c43      	adds	r3, r0, #1
 8005c86:	d102      	bne.n	8005c8e <_close_r+0x1a>
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	b103      	cbz	r3, 8005c8e <_close_r+0x1a>
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	bd38      	pop	{r3, r4, r5, pc}
 8005c90:	20000170 	.word	0x20000170

08005c94 <_fstat_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4d07      	ldr	r5, [pc, #28]	; (8005cb4 <_fstat_r+0x20>)
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	602b      	str	r3, [r5, #0]
 8005ca2:	f7fb fcae 	bl	8001602 <_fstat>
 8005ca6:	1c43      	adds	r3, r0, #1
 8005ca8:	d102      	bne.n	8005cb0 <_fstat_r+0x1c>
 8005caa:	682b      	ldr	r3, [r5, #0]
 8005cac:	b103      	cbz	r3, 8005cb0 <_fstat_r+0x1c>
 8005cae:	6023      	str	r3, [r4, #0]
 8005cb0:	bd38      	pop	{r3, r4, r5, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20000170 	.word	0x20000170

08005cb8 <_isatty_r>:
 8005cb8:	b538      	push	{r3, r4, r5, lr}
 8005cba:	4d06      	ldr	r5, [pc, #24]	; (8005cd4 <_isatty_r+0x1c>)
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	4608      	mov	r0, r1
 8005cc2:	602b      	str	r3, [r5, #0]
 8005cc4:	f7fb fcad 	bl	8001622 <_isatty>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d102      	bne.n	8005cd2 <_isatty_r+0x1a>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	b103      	cbz	r3, 8005cd2 <_isatty_r+0x1a>
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	20000170 	.word	0x20000170

08005cd8 <_lseek_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4d07      	ldr	r5, [pc, #28]	; (8005cf8 <_lseek_r+0x20>)
 8005cdc:	4604      	mov	r4, r0
 8005cde:	4608      	mov	r0, r1
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	602a      	str	r2, [r5, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f7fb fca6 	bl	8001638 <_lseek>
 8005cec:	1c43      	adds	r3, r0, #1
 8005cee:	d102      	bne.n	8005cf6 <_lseek_r+0x1e>
 8005cf0:	682b      	ldr	r3, [r5, #0]
 8005cf2:	b103      	cbz	r3, 8005cf6 <_lseek_r+0x1e>
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	bd38      	pop	{r3, r4, r5, pc}
 8005cf8:	20000170 	.word	0x20000170

08005cfc <_read_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	4d07      	ldr	r5, [pc, #28]	; (8005d1c <_read_r+0x20>)
 8005d00:	4604      	mov	r4, r0
 8005d02:	4608      	mov	r0, r1
 8005d04:	4611      	mov	r1, r2
 8005d06:	2200      	movs	r2, #0
 8005d08:	602a      	str	r2, [r5, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f7fb fc34 	bl	8001578 <_read>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d102      	bne.n	8005d1a <_read_r+0x1e>
 8005d14:	682b      	ldr	r3, [r5, #0]
 8005d16:	b103      	cbz	r3, 8005d1a <_read_r+0x1e>
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	bd38      	pop	{r3, r4, r5, pc}
 8005d1c:	20000170 	.word	0x20000170

08005d20 <_gettimeofday>:
 8005d20:	4b02      	ldr	r3, [pc, #8]	; (8005d2c <_gettimeofday+0xc>)
 8005d22:	2258      	movs	r2, #88	; 0x58
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	f04f 30ff 	mov.w	r0, #4294967295
 8005d2a:	4770      	bx	lr
 8005d2c:	20000170 	.word	0x20000170

08005d30 <_init>:
 8005d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d32:	bf00      	nop
 8005d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d36:	bc08      	pop	{r3}
 8005d38:	469e      	mov	lr, r3
 8005d3a:	4770      	bx	lr

08005d3c <_fini>:
 8005d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3e:	bf00      	nop
 8005d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d42:	bc08      	pop	{r3}
 8005d44:	469e      	mov	lr, r3
 8005d46:	4770      	bx	lr
